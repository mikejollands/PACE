function varargout = PACE_1_5(varargin)
% PACE_1_5 MATLAB code for PACE_1_5.fig
%      PACE_1_5, by itself, creates a new PACE_1_5 or raises the existing
%      singleton*.
%
%      H = PACE_1_5 returns the handle to a new PACE_1_5 or the handle to
%      the existing singleton*.
%
%      PACE_1_5('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in PACE_1_5.M with the given input arguments.
%
%      PACE_1_5('Property','Value',...) creates a new PACE_1_5 or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before PACE_1_5_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to PACE_1_5_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help PACE_1_5

% Last Modified by GUIDE v2.5 21-Jan-2020 21:58:59
% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
    'gui_Singleton',  gui_Singleton, ...
    'gui_OpeningFcn', @PACE_1_5_OpeningFcn, ...
    'gui_OutputFcn',  @PACE_1_5_OutputFcn, ...
    'gui_LayoutFcn',  [] , ...
    'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT
end

% --- Executes just before PACE_1_5 is made visible.
function PACE_1_5_OpeningFcn(hObject, ~, handles, varargin)
set( handles.figure1, 'Units', 'pixels' );
screenSize = get(0, 'ScreenSize');
position = get( handles.figure1, 'Position' );
position(3) = 530;
position(4) = 565;
position(1) = (screenSize(3)-position(3))/2; % put the GUI in the middle of the screen
position(2) = (screenSize(4)-position(4))/2; % put the GUI in the middle of the screen
set( handles.figure1,'Position', position);
ax4=handles.axes4;
ax6=handles.axes6;
cla(ax4,'reset');
cla(ax6,'reset');
clear global

% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to PACE_1_5 (see VARARGIN)
% Create the data to plot.

% Choose default command line output for PACE_1_5
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes PACE_1_5 wait for user response (see UIRESUME)
% uiwait(handles.figure1);
% global original_directoryz
% original_directoryz=cd

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%---------------------------INITIAL SETUP---------------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function varargout = PACE_1_5_OutputFcn(~, ~, handles)
varargout{1} = handles.output;
ax4=handles.axes4;
ax6=handles.axes6;
cla(ax4,'reset');
cla(ax6,'reset');
clear global
set(handles.pushbutton1,'enable','on','TooltipString',sprintf('%s\n%s\n%s\n%s','Import data from a .csv, .xlsx, .xls or .txt file. Ideally,','data should be arranged with the first column being,','distance and the second being concentration,','but this is not necessary (dialog will appear if not)'))
set(handles.pushbutton14,'enable','on','TooltipString',sprintf('%s\n%s\n%s\n%s','Randomly create a concentration-distance profile.','This can be used for practise purposes, or for','general understanding. Profiles are generated by applying','random scatter to simulated diffusion profiles'));
set(handles.pushbutton2,'enable','off','TooltipString',sprintf('%s\n%s\n%s\n%s','Error-function shaped curve, assuming an initial step-','function, with semi-infinite extent, and a lower concentration','on the left than the right. See the documentation for ','further details including the relevant equation.'));
set(handles.pushbutton5,'enable','off','TooltipString',sprintf('%s\n%s\n%s\n%s','Error-function shaped curve, assuming an initial step-','function, with semi-infinite extent, and a higher concentration','on the left than the right. See the documentation for ','further details including the relevant equation.'));
set(handles.pushbutton6,'enable','off','TooltipString',sprintf('%s\n%s\n%s\n%s','U-shaped curve, assuming fixed boundary conditions, with higher','contents at the boundary than the core. This solution is only appropriate','when the initial core concentration is preserved. See the documentation','for further details including the relevant equation.'));
set(handles.pushbutton7,'enable','off','TooltipString',sprintf('%s\n%s\n%s\n%s','Upside-down-bowl-shaped curve, assuming fixed boundary conditions,','with lower contents at the boundary than the core. This solution is only',' appropriate when the initial core concentration is preserved. See the',' documentation for further details including the relevant equation.'));
set(handles.pushbutton8,'enable','off','TooltipString',sprintf('%s\n%s\n%s\n%s\n%s','Half error-function shaped curve, with a constant boundary at the left','hand side, with lower contents than the core. This assumes position','zero is the boundary. This solution only works when the original core is','preserved. See the documentation for further details including the','relevant equation.'));
set(handles.pushbutton9,'enable','off','TooltipString',sprintf('%s\n%s\n%s\n%s\n%s','Half error-function shaped curve, with a constant boundary at the left','hand side, with higher contents than the core. This assumes position','zero is the boundary. This solution only works when the original core is','preserved. See the documentation for further details including the','relevant equation.'));
set(handles.pushbutton10,'enable','off','TooltipString',sprintf('%s\n%s\n%s\n%s\n%s','Half error-function shaped curve, with a constant boundary at the right','hand side, with higher contents than the core. This requires a','position of the boundary to be stated. This solution only works when the','original core is preserved. See the documentation for further details',' including the relevant equation.'));
set(handles.pushbutton11,'enable','off','TooltipString',sprintf('%s\n%s\n%s\n%s\n%s','Half error-function shaped curve, with a constant boundary at the right','hand side, with lower contents than the core. This requires a','position of the boundary to be stated. This solution only works when the','original core is preserved. See the documentation for further details',' including the relevant equation.'));
set(handles.pushbutton13,'enable','off','TooltipString',sprintf('%s\n%s','Fit a curve to the data, using non-linear least squares regression.','If the fit looks erroneous, try adding a profile length guess.'));
set(handles.pushbutton17,'enable','off','TooltipString',sprintf('%s\n%s','Select this option if your data were analysed using a','circular or elliptical beam'));
set(handles.pushbutton19,'enable','off','TooltipString',sprintf('%s\n%s','Select this option if your data were analysed using a','square or rectangular beam'));
set(handles.pushbutton20,'enable','off','TooltipString',sprintf('%s\n%s','Select this option if your data were analysed using a','beam with a Gaussian interaction volume'));
set(handles.pushbutton208,'enable','off','TooltipString',sprintf('%s\n%s','Select this option if your data were analysed using a','beam with a Voigt interaction volume'));
set(handles.pushbutton24,'enable','off','TooltipString',sprintf('%s\n%s\n%s','Select this option if your data were analysed using a','beam with a Lorentzian interaction volume (unusual', 'but interesting)'));
set(handles.pushbutton21,'enable','off','TooltipString',sprintf('%s','Deconvolute the profile to obtain an estimate of the true profile'));
set(handles.pushbutton29,'enable','off','TooltipString',sprintf('%s\n%s\n%s\n%s','Select this option if your data are arranged','in nanometres, otherwise select µm, mm or m.','If none of these units are appropriate, please','recast prior to import.'))
set(handles.pushbutton30,'enable','off','TooltipString',sprintf('%s\n%s\n%s\n%s','Select this option if your data are arranged','in micrometres, otherwise select nm, mm or m.','If none of these units are appropriate, please','recast prior to import.'))
set(handles.pushbutton31,'enable','off','TooltipString',sprintf('%s\n%s\n%s\n%s','Select this option if your data are arranged','in millimetres, otherwise select nm, µm or m.','If none of these units are appropriate, please','recast prior to import.'))
set(handles.pushbutton32,'enable','off','TooltipString',sprintf('%s\n%s\n%s\n%s','Select this option if your data are arranged','in metres, otherwise select nm, µm or m.','If none of these units are appropriate, please','recast prior to import.'))
set(handles.pushbutton35,'enable','off','TooltipString',sprintf('%s','Reset the choice of scale, and choose again'));
set(handles.pushbutton36,'enable','off','TooltipString',sprintf('%s','Reset the choice of profile shape, and choose again'));
set(handles.pushbutton37,'enable','off','TooltipString',sprintf('%s','Remove the fit'));
set(handles.pushbutton38,'enable','off','TooltipString',sprintf('%s','Reset the choice of beam shape, and choose again'));
set(handles.pushbutton141,'enable','off','TooltipString',sprintf('%s\n%s\n%s\n%s','Select this option if your data are in wt. ppm,','otherwise select wt. %, or other / none.','Note that the models used are concentration-','independent, so this is for display purposes only.'))
set(handles.pushbutton142,'enable','off','TooltipString',sprintf('%s\n%s\n%s\n%s','Select this option if your data are in wt. %,','otherwise select wt. ppm, or other / none.','Note that the models used are concentration-','independent, so this is for display purposes only.'))
set(handles.pushbutton143,'enable','off','TooltipString',sprintf('%s\n%s\n%s\n%s','Select this option if your data are neither in wt. ppm','nor wt. %, otherwise select wt. %, or wt. ppm.','Note that the models used are concentration-','independent, so this is for display purposes only.'))
set(handles.pushbutton145,'enable','off','TooltipString',sprintf('%s','Reset the choice of concentration units, and choose again'));
set(handles.togglebutton17,'enable','off','TooltipString',sprintf('%s','Export basic fit data, and uncertainties, to clipboard.'));
set(handles.pushbutton210,'enable','off','TooltipString',sprintf('%s\n%s','Select this option to keep/return the best fit','to log10Dt'));
set(handles.pushbutton211,'enable','off','TooltipString',sprintf('%s\n%s\n%s','Select this option to extract the diffusion coefficient','in m2s-1. For this, you will need to provide a','time, in seconds.'));
set(handles.pushbutton212,'enable','off','TooltipString',sprintf('%s\n%s\n%s','Select this option to extract the time (log t)','in seconds. For this, you will need to provide a','diffusion coefficient in m2s-1.'));
set(handles.pushbutton213,'enable','off','TooltipString',sprintf('%s','Reset the deconvolution'));
% exclusion buttons
set(handles.togglebutton8,'enable','off','TooltipString',sprintf('%s','Exclude data from top graph'));
set(handles.pushbutton155,'enable','off','TooltipString',sprintf('%s','Remove all exclusions'));
set(handles.togglebutton11,'enable','off','TooltipString',sprintf('%s','Exclude data from lower graph'));
set(handles.pushbutton156,'enable','off','TooltipString',sprintf('%s','Remove all exclusions'));

% text handles relating to the distance units by the edit boxes
set(handles.text28, 'Visible', 'off'); %nm
set(handles.text29, 'Visible', 'off'); %µm
set(handles.text30, 'Visible', 'off'); %mm
set(handles.text31, 'Visible', 'off'); %m
set(handles.text32, 'Visible', 'off'); %nm
set(handles.text33, 'Visible', 'off'); %µm
set(handles.text34, 'Visible', 'off'); %mm
set(handles.text35, 'Visible', 'off'); %m

% all tabbed panels set to be invisible
set(handles.uipanel6, 'Visible', 'off'); % points
set(handles.uipanel14, 'Visible', 'off'); % line0
set(handles.uipanel7, 'Visible', 'off'); % line1
set(handles.uipanel8, 'Visible', 'off'); % line2
set(handles.uipanel9, 'Visible', 'off'); % text
set(handles.uipanel10, 'Visible', 'off'); % general
set(handles.uipanel11, 'Visible', 'off'); % export
set(handles.uipanel16, 'Visible', 'off'); % color wheel

% all buttons related to tabbed panels set as invisible
set(handles.pushbutton120,'Visible', 'off'); %points
set(handles.pushbutton146,'Visible', 'off'); % line 0
set(handles.pushbutton121,'Visible', 'off'); % line 1
set(handles.pushbutton122,'Visible', 'off'); % line 2
set(handles.pushbutton123,'Visible', 'off'); % text
set(handles.pushbutton124,'Visible', 'off'); % general
set(handles.pushbutton125,'Visible', 'off'); % export
set(handles.togglebutton6,'enable','off','Value',0);

% all editable text boxes set as off, and empty
set(handles.edit10, 'enable', 'off','TooltipString',sprintf('%s\n%s\n%s\n%s\n%s','Add '));
set(handles.edit9, 'enable', 'off')
handles.edit9.String = '';
handles.edit10.String = '';
brush off
global right_edge;
global factor;
right_edge=[];
factor=1;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%---------------------------RESET ALL-------------------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function pushbutton16_Callback(~, ~, handles) %#ok<DEFNU>
set( handles.figure1, 'Units', 'pixels' );
position = get( handles.figure1, 'Position' );
position(3) = 530;
position(4) = 565;
set( handles.figure1,'Position', position );
clear global
ax4=handles.axes4;
ax6=handles.axes6;
cla(ax4,'reset');
cla(ax6,'reset');
set(handles.pushbutton2,'enable','off')
set(handles.pushbutton5,'enable','off')
set(handles.pushbutton6,'enable','off')
set(handles.pushbutton7,'enable','off')
set(handles.pushbutton8,'enable','off')
set(handles.pushbutton9,'enable','off')
set(handles.pushbutton10,'enable','off')
set(handles.pushbutton11,'enable','off')
set(handles.pushbutton13,'enable','off')
set(handles.pushbutton17,'enable','off')
set(handles.pushbutton19,'enable','off')
set(handles.pushbutton20,'enable','off')
set(handles.pushbutton24,'enable','off')
set(handles.pushbutton21,'enable','off')
set(handles.pushbutton29,'enable','off')
set(handles.pushbutton30,'enable','off')
set(handles.pushbutton31,'enable','off')
set(handles.pushbutton32,'enable','off')
set(handles.pushbutton35,'enable','off')
set(handles.pushbutton36,'enable','off')
set(handles.pushbutton37,'enable','off')
set(handles.pushbutton38,'enable','off')
set(handles.pushbutton141,'enable','off')
set(handles.pushbutton142,'enable','off')
set(handles.pushbutton143,'enable','off')
set(handles.pushbutton145,'enable','off')
set(handles.togglebutton17,'enable','off')
set(handles.pushbutton208,'enable','off')
set(handles.pushbutton210,'enable','off')
set(handles.pushbutton211,'enable','off')
set(handles.pushbutton212,'enable','off')
set(handles.pushbutton213,'enable','off')
% exclusion buttons
set(handles.togglebutton8,'enable','off','Value',0);
set(handles.pushbutton155,'enable','off');
set(handles.togglebutton11,'enable','off','Value',0);
set(handles.pushbutton156,'enable','off');
brush off
set(handles.text28, 'Visible', 'off'); %nm
set(handles.text29, 'Visible', 'off'); %µm
set(handles.text30, 'Visible', 'off'); %mm
set(handles.text31, 'Visible', 'off'); %m
set(handles.text32, 'Visible', 'off'); %nm
set(handles.text33, 'Visible', 'off'); %µm
set(handles.text34, 'Visible', 'off'); %mm
set(handles.text35, 'Visible', 'off'); %m
set(handles.uipanel6, 'Visible', 'off'); % points
set(handles.uipanel14, 'Visible', 'off'); % line0
set(handles.uipanel7, 'Visible', 'off'); % line1
set(handles.uipanel8, 'Visible', 'off'); % line2
set(handles.uipanel9, 'Visible', 'off'); % text
set(handles.uipanel10, 'Visible', 'off'); % general
set(handles.uipanel11, 'Visible', 'off'); % export
set(handles.uipanel16, 'Visible', 'off'); % color wheel
set(handles.togglebutton6,'enable','off','Value',0);
set(handles.pushbutton120,'Visible', 'off'); %points
set(handles.pushbutton146,'Visible', 'off'); % line 0
set(handles.pushbutton121,'Visible', 'off'); % line 1
set(handles.pushbutton122,'Visible', 'off'); % line 2
set(handles.pushbutton123,'Visible', 'off'); % text
set(handles.pushbutton124,'Visible', 'off'); % general
set(handles.pushbutton125,'Visible', 'off'); % export
set(handles.edit10, 'enable', 'off')
set(handles.edit9, 'enable', 'off')
handles.edit9.String = '';
handles.edit10.String = '';
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%-----------------------------IMPORT DATA---------------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% import
function pushbutton1_Callback(~, ~, handles) %#ok<DEFNU>
set( handles.figure1, 'Units', 'pixels' );
position = get( handles.figure1, 'Position' );
position(3) = 530;
position(4) = 565;
set( handles.figure1,'Position', position );
clear global
global ax4
global ax6
ax4=handles.axes4;
ax6=handles.axes6;
cla(ax4,'reset');
cla(ax6,'reset');
original_directory=cd;
[file,path] = uigetfile({'*.txt;*.csv;*.xls;*.xlsx;*.dat'});
cd (path);
data=readmatrix(file);
if size(data,2)>2
    prompt={'Distance column (A,B,C etc)','Concentration column (A,B,C etc)'};
    dlgtitle='Import extra input';
    dims=[1 35];
    definput={'',''};
    answer=inputdlg(prompt,dlgtitle,dims,definput);
    data_n(:,1)=readmatrix(file,'Range',strcat(answer{1},':',answer{1}));
    data_n(:,2)=readmatrix(file,'Range',strcat(answer{2},':',answer{2}));
    data=data_n;
end
cd(original_directory);
set(handles.pushbutton2,'enable','off')
set(handles.pushbutton5,'enable','off')
set(handles.pushbutton6,'enable','off')
set(handles.pushbutton7,'enable','off')
set(handles.pushbutton8,'enable','off')
set(handles.pushbutton9,'enable','off')
set(handles.pushbutton10,'enable','off')
set(handles.pushbutton11,'enable','off')
set(handles.pushbutton13,'enable','off')
set(handles.pushbutton17,'enable','off')
set(handles.pushbutton19,'enable','off')
set(handles.pushbutton20,'enable','off')
set(handles.pushbutton24,'enable','off')
set(handles.pushbutton21,'enable','off')
set(handles.pushbutton29,'enable','off')
set(handles.pushbutton30,'enable','off')
set(handles.pushbutton31,'enable','off')
set(handles.pushbutton32,'enable','off')
set(handles.pushbutton35,'enable','off')
set(handles.pushbutton36,'enable','off')
set(handles.pushbutton37,'enable','off')
set(handles.pushbutton38,'enable','off')
set(handles.pushbutton141,'enable','off')
set(handles.pushbutton142,'enable','off')
set(handles.pushbutton143,'enable','off')
set(handles.pushbutton145,'enable','off')
set(handles.togglebutton17,'enable','off')
set(handles.pushbutton208,'enable','off')
set(handles.pushbutton210,'enable','off')
set(handles.pushbutton211,'enable','off')
set(handles.pushbutton212,'enable','off')
set(handles.pushbutton213,'enable','off')
set(handles.togglebutton8,'enable','on','Value',0);
set(handles.pushbutton155,'enable','on');
set(handles.togglebutton11,'enable','off','Value',0);
set(handles.pushbutton156,'enable','off');
brush off
set(handles.text28, 'Visible', 'off'); %nm
set(handles.text29, 'Visible', 'off'); %µm
set(handles.text30, 'Visible', 'off'); %mm
set(handles.text31, 'Visible', 'off'); %m
set(handles.text32, 'Visible', 'off'); %nm
set(handles.text33, 'Visible', 'off'); %µm
set(handles.text34, 'Visible', 'off'); %mm
set(handles.text35, 'Visible', 'off'); %m
set(handles.uipanel6, 'Visible', 'off'); % points
set(handles.uipanel14, 'Visible', 'off'); % line0
set(handles.uipanel7, 'Visible', 'off'); % line1
set(handles.uipanel8, 'Visible', 'off'); % line2
set(handles.uipanel9, 'Visible', 'off'); % text
set(handles.uipanel10, 'Visible', 'off'); % general
set(handles.uipanel11, 'Visible', 'off'); % export
set(handles.uipanel16, 'Visible', 'off'); % color wheel
set(handles.pushbutton120,'Visible', 'off'); %points
set(handles.pushbutton146,'Visible', 'off'); % line 0
set(handles.pushbutton121,'Visible', 'off'); % line 1
set(handles.pushbutton122,'Visible', 'off'); % line 2
set(handles.pushbutton123,'Visible', 'off'); % text
set(handles.pushbutton124,'Visible', 'off'); % general
set(handles.pushbutton125,'Visible', 'off'); % export
set(handles.togglebutton6,'enable','off','Value',0);
set(handles.edit10, 'enable', 'off')
set(handles.edit9, 'enable', 'off')
handles.edit9.String = '';
handles.edit10.String = '';
global right_edge
global factor
right_edge=[];
factor=1;
global i
i=1;
global profile_length_original;
global profile_original;
global profile_length;
global profile;
global s0
set(handles.pushbutton29,'enable','on')
set(handles.pushbutton30,'enable','on')
set(handles.pushbutton31,'enable','on')
set(handles.pushbutton32,'enable','on')
s0=scatter(ax4,data(:,1),data(:,2), 'filled','MarkerEdgeColor','black','MarkerFaceColor',[0.5 0.5 0.5]);
hold(ax4,'on');
profile_length=data(:,1);
profile=data(:,2);
xlim(ax4,[min(data(:,1)) max(data(:,1))])
ylim(ax4,'auto')
xlabel(ax4,'Distance')
ylabel(ax4,'Concentration')
ax4.FontUnits='pixels';
ax4.FontSize=10;
profile_length_original=profile_length;
profile_original=profile;

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%-----------------------------RANDOM DATA---------------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function pushbutton14_Callback(~, ~, handles) %#ok<DEFNU>
set( handles.figure1, 'Units', 'pixels' );
position = get( handles.figure1, 'Position' );
position(3) = 530;
position(4) = 565;
set( handles.figure1,'Position', position );
clear global
global ax4
global ax6
ax4=handles.axes4;
ax6=handles.axes6;
cla(ax4,'reset');
cla(ax6,'reset');

set(handles.pushbutton2,'enable','off')
set(handles.pushbutton5,'enable','off')
set(handles.pushbutton6,'enable','off')
set(handles.pushbutton7,'enable','off')
set(handles.pushbutton8,'enable','off')
set(handles.pushbutton9,'enable','off')
set(handles.pushbutton10,'enable','off')
set(handles.pushbutton11,'enable','off')
set(handles.pushbutton13,'enable','off')
set(handles.pushbutton17,'enable','off')
set(handles.pushbutton19,'enable','off')
set(handles.pushbutton20,'enable','off')
set(handles.pushbutton24,'enable','off')
set(handles.pushbutton21,'enable','off')
set(handles.pushbutton29,'enable','off')
set(handles.pushbutton30,'enable','off')
set(handles.pushbutton31,'enable','off')
set(handles.pushbutton32,'enable','off')
set(handles.pushbutton35,'enable','off')
set(handles.pushbutton36,'enable','off')
set(handles.pushbutton37,'enable','off')
set(handles.pushbutton38,'enable','off')
set(handles.pushbutton141,'enable','off')
set(handles.pushbutton142,'enable','off')
set(handles.pushbutton143,'enable','off')
set(handles.pushbutton145,'enable','off')
set(handles.togglebutton17,'enable','off')
set(handles.pushbutton208,'enable','off')
set(handles.pushbutton210,'enable','off')
set(handles.pushbutton211,'enable','off')
set(handles.pushbutton212,'enable','off')
set(handles.togglebutton8,'enable','on','Value',0);
set(handles.pushbutton155,'enable','on');
set(handles.togglebutton11,'enable','off','Value',0);
set(handles.pushbutton156,'enable','off');
brush off

set(handles.text28, 'Visible', 'off'); %nm
set(handles.text29, 'Visible', 'off'); %µm
set(handles.text30, 'Visible', 'off'); %mm
set(handles.text31, 'Visible', 'off'); %m
set(handles.text32, 'Visible', 'off'); %nm
set(handles.text33, 'Visible', 'off'); %µm
set(handles.text34, 'Visible', 'off'); %mm
set(handles.text35, 'Visible', 'off'); %m

% all tabbed panels set to be invisible
set(handles.uipanel6, 'Visible', 'off'); % points
set(handles.uipanel14, 'Visible', 'off'); % line0
set(handles.uipanel7, 'Visible', 'off'); % line1
set(handles.uipanel8, 'Visible', 'off'); % line2
set(handles.uipanel9, 'Visible', 'off'); % text
set(handles.uipanel10, 'Visible', 'off'); % general
set(handles.uipanel11, 'Visible', 'off'); % export
set(handles.uipanel16, 'Visible', 'off'); % color wheel

% all buttons related to tabbed panels set as invisible
set(handles.pushbutton120,'Visible', 'off'); %points
set(handles.pushbutton146,'Visible', 'off'); % line 0
set(handles.pushbutton121,'Visible', 'off'); % line 1
set(handles.pushbutton122,'Visible', 'off'); % line 2
set(handles.pushbutton123,'Visible', 'off'); % text
set(handles.pushbutton124,'Visible', 'off'); % general
set(handles.pushbutton125,'Visible', 'off'); % export
set(handles.togglebutton6,'enable','off','Value',0);

% exclude data toggle
% set(handles.togglebutton8,'Value',0); %exclude for the first plot


set(handles.edit10, 'enable', 'off')
set(handles.edit9, 'enable', 'off')
handles.edit9.String = '';
handles.edit10.String = '';
global right_edge
global factor
right_edge=[];
factor=1;
global i
i=2;
global profile_length_original
global profile_length;
global profile;
global profile_original;
global s0
set(handles.pushbutton29,'enable','on')
set(handles.pushbutton30,'enable','on')
set(handles.pushbutton31,'enable','on')
set(handles.pushbutton32,'enable','on')
set(handles.edit9, 'enable', 'off')
handles.edit9.String = '';
randomseed=rand(1);
profile_length=round(rand(1)*200+20);
diffusion_length=(profile_length/(rand(1)*2+2))/(rand(1)+1);
n_pts=round(rand(1)*50+20);
profile_length=0:(profile_length/n_pts):profile_length;
interface=rand(1)*100+10;
core=rand(1)*100;
if randomseed>=0 && randomseed<0.2
    profile_length=profile_length+(diffusion_length/(rand(1)*2+2));
    profile=(interface-core)*erfc((profile_length/1000000)/(diffusion_length/1000000))+core;
end
if randomseed>=0.2 && randomseed<0.4
    profile=(interface-core)*erfc((profile_length/1000000)/(diffusion_length/1000000))+core;
    profile=fliplr(profile);
end
if randomseed>=0.4 && randomseed<0.8
    profile=(max([interface core])-min([interface core]))*0.5*erfc(((profile_length-(mean(profile_length)*(rand(1)*0.4+0.8)))/1000000)/(diffusion_length/2000000))+min([interface core]);
    if randomseed>=0.6 && randomseed<0.8
        profile=fliplr(profile);
    end
end
if randomseed>=0.8 && randomseed<=1
    profile_length=(profile_length+(diffusion_length/(rand(1)*2+2)));
    profile=core+(interface-core)*(erfc(((profile_length-(diffusion_length/(rand(1)*2+2)))/1000000)/(diffusion_length/2000000))+erfc(((max(profile_length)-profile_length)/1000000)/(diffusion_length/((rand(1)+1)*1000000))));
end
profile=profile+rand(1,size(profile,2)).*((max([interface core])-min([interface core]))*(rand(1)*0.1+0.05))-0.5*((max([interface core])-min([interface core]))*(rand(1)*0.1+0.05));
profile_length=profile_length';
profile=profile';
s0=scatter(ax4,profile_length,profile, 'filled','MarkerEdgeColor','black','MarkerFaceColor',[0.5 0.5 0.5]);
hold(ax4,'on');
xlim(ax4,[0 max(profile_length)])
ylim(ax4,'auto')
xlabel(ax4,'Distance')
ylabel(ax4,'Concentration')
ax4.FontUnits='pixels';
ax4.FontSize=10;

profile_length_original=profile_length;
profile_original=profile;
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%--------------------ALL OPTIONS RELATED TO SCALE-------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% nanometres button
function pushbutton29_Callback(~, ~, handles) %#ok<DEFNU>
brush off
set(handles.pushbutton141,'enable','on')
set(handles.pushbutton142,'enable','on')
set(handles.pushbutton143,'enable','on')
set(handles.pushbutton30,'enable','off')
set(handles.pushbutton31,'enable','off')
set(handles.pushbutton32,'enable','off')
set(handles.pushbutton35,'enable','on')
set(handles.text28, 'Visible', 'on'); %nm
set(handles.text29, 'Visible', 'off'); %µm
set(handles.text30, 'Visible', 'off'); %mm
set(handles.text31, 'Visible', 'off'); %m
set(handles.text32, 'Visible', 'on'); %nm
set(handles.text33, 'Visible', 'off'); %µm
set(handles.text34, 'Visible', 'off'); %mm
set(handles.text35, 'Visible', 'off'); %m

global factor
global profile_length
global profile_length_original %#ok<*NUSED>
global ax4
profile_length=profile_length/1000000000;
factor=1000000000;
global profile_length_brushed
if isempty(profile_length_brushed)==0
profile_length_brushed=profile_length_brushed/factor;
end
xlabel(ax4,'Distance (nm)')
set(handles.edit12,'string','Distance (nm)');
end

% micrometres
function pushbutton30_Callback(~, ~, handles) %#ok<DEFNU>
brush off
set(handles.pushbutton141,'enable','on')
set(handles.pushbutton142,'enable','on')
set(handles.pushbutton143,'enable','on')
set(handles.pushbutton29,'enable','off')
set(handles.pushbutton31,'enable','off')
set(handles.pushbutton32,'enable','off')
set(handles.pushbutton35,'enable','on')
set(handles.text28, 'Visible', 'off'); %nm
set(handles.text29, 'Visible', 'on'); %µm
set(handles.text30, 'Visible', 'off'); %mm
set(handles.text31, 'Visible', 'off'); %m
set(handles.text32, 'Visible', 'off'); %nm
set(handles.text33, 'Visible', 'on'); %µm
set(handles.text34, 'Visible', 'off'); %mm
set(handles.text35, 'Visible', 'off'); %m

global factor
global profile_length
global profile_length_original
global ax4
profile_length=profile_length/1000000;
factor=1000000;
global profile_length_brushed
if isempty(profile_length_brushed)==0
profile_length_brushed=profile_length_brushed/factor;
end
xlabel(ax4,'Distance (µm)')
set(handles.edit12,'string','Distance (µm)');
end
% millimetres
function pushbutton31_Callback(~, ~, handles) %#ok<DEFNU>
brush off
set(handles.pushbutton141,'enable','on')
set(handles.pushbutton142,'enable','on')
set(handles.pushbutton143,'enable','on')
set(handles.pushbutton29,'enable','off')
set(handles.pushbutton30,'enable','off')
set(handles.pushbutton32,'enable','off')
set(handles.pushbutton35,'enable','on')
set(handles.text28, 'Visible', 'off'); %nm
set(handles.text29, 'Visible', 'off'); %µm
set(handles.text30, 'Visible', 'on'); %mm
set(handles.text31, 'Visible', 'off'); %m
set(handles.text32, 'Visible', 'off'); %nm
set(handles.text33, 'Visible', 'off'); %µm
set(handles.text34, 'Visible', 'on'); %mm
set(handles.text35, 'Visible', 'off'); %m

global factor
global profile_length
global profile_length_original
global ax4
profile_length=profile_length/1000;
factor=1000;
global profile_length_brushed
if isempty(profile_length_brushed)==0
profile_length_brushed=profile_length_brushed/factor;
end
xlabel(ax4,'Distance (mm)')
set(handles.edit12,'string','Distance (mm)');
end
% metres
function pushbutton32_Callback(~, ~, handles) %#ok<DEFNU>
brush off
set(handles.pushbutton141,'enable','on')
set(handles.pushbutton142,'enable','on')
set(handles.pushbutton143,'enable','on')
set(handles.pushbutton29,'enable','off')
set(handles.pushbutton30,'enable','off')
set(handles.pushbutton31,'enable','off')
set(handles.pushbutton35,'enable','on')
set(handles.text28, 'Visible', 'off'); %nm
set(handles.text29, 'Visible', 'off'); %µm
set(handles.text30, 'Visible', 'off'); %mm
set(handles.text31, 'Visible', 'on'); %m
set(handles.text32, 'Visible', 'off'); %nm
set(handles.text33, 'Visible', 'off'); %µm
set(handles.text34, 'Visible', 'off'); %mm
set(handles.text35, 'Visible', 'on'); %m

global factor
global profile_length_original
global profile_length
global ax4
factor=1;
global profile_length_brushed
if isempty(profile_length_brushed)==0
profile_length_brushed=profile_length_brushed/factor;
end
xlabel(ax4,'Distance (m)')
set(handles.edit12,'string','Distance (m)');
end
% reset 1: scale reset
function pushbutton35_Callback(~, ~, handles) %#ok<DEFNU>
global factor
global profile_length
global profile_length_original
global ax4
set(handles.pushbutton29,'enable','on')
set(handles.pushbutton30,'enable','on')
set(handles.pushbutton31,'enable','on')
set(handles.pushbutton32,'enable','on')
set(handles.edit12,'string','Distance');
set(handles.pushbutton35,'enable','off')
profile_length=profile_length*factor;
global profile_length_brushed
if isempty(profile_length_brushed)==0
profile_length_brushed=profile_length_brushed*factor;
end
xlabel(ax4,'Distance')
set(handles.edit12,'string','Distance');
set(handles.text28, 'Visible', 'off'); %nm
set(handles.text29, 'Visible', 'off'); %µm
set(handles.text30, 'Visible', 'off'); %mm
set(handles.text31, 'Visible', 'off'); %m
set(handles.text32, 'Visible', 'off'); %nm
set(handles.text33, 'Visible', 'off'); %µm
set(handles.text34, 'Visible', 'off'); %mm
set(handles.text35, 'Visible', 'off'); %m

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%----------------ALL OPTIONS RELATED TO CONCENTRATION---------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% wt. ppm
function pushbutton141_Callback(~, ~, handles) %#ok<DEFNU>
global c_units
global ax4
c_units=1;
brush off
set(handles.pushbutton142,'enable','off')
set(handles.pushbutton143,'enable','off')
set(handles.pushbutton2,'enable','on')
set(handles.pushbutton5,'enable','on')
set(handles.pushbutton6,'enable','on')
set(handles.pushbutton7,'enable','on')
set(handles.pushbutton8,'enable','on')
set(handles.pushbutton9,'enable','on')
set(handles.pushbutton10,'enable','on')
set(handles.pushbutton11,'enable','on')
set(handles.pushbutton145,'enable','on')
set(handles.pushbutton35,'enable','off')
% axes(handles.axes4);
ylabel(ax4,'Concentration (wt.ppm)')
end
% wt%
function pushbutton142_Callback(~, ~, handles) %#ok<DEFNU>
global c_units
global ax4
c_units=2;
brush off
set(handles.pushbutton141,'enable','off')
set(handles.pushbutton143,'enable','off')
set(handles.pushbutton2,'enable','on')
set(handles.pushbutton5,'enable','on')
set(handles.pushbutton6,'enable','on')
set(handles.pushbutton7,'enable','on')
set(handles.pushbutton8,'enable','on')
set(handles.pushbutton9,'enable','on')
set(handles.pushbutton10,'enable','on')
set(handles.pushbutton11,'enable','on')
set(handles.pushbutton145,'enable','on')
set(handles.pushbutton35,'enable','off')
% axes(handles.axes4);
ylabel(ax4,'Concentration (wt.%)')
end
% other concentration
function pushbutton143_Callback(~, ~, handles) %#ok<DEFNU>
global c_units
global ax4
c_units=3;
brush off
set(handles.pushbutton141,'enable','off')
set(handles.pushbutton142,'enable','off')
set(handles.pushbutton2,'enable','on')
set(handles.pushbutton5,'enable','on')
set(handles.pushbutton6,'enable','on')
set(handles.pushbutton7,'enable','on')
set(handles.pushbutton8,'enable','on')
set(handles.pushbutton9,'enable','on')
set(handles.pushbutton10,'enable','on')
set(handles.pushbutton11,'enable','on')
set(handles.pushbutton145,'enable','on')
set(handles.pushbutton35,'enable','off')
% axes(handles.axes4);
ylabel(ax4,'Concentration')
end
% reset concentration units
function pushbutton145_Callback(~, ~, handles) %#ok<DEFNU>
global c_units
global ax4
c_units=3;
brush off
set(handles.pushbutton141,'enable','on')
set(handles.pushbutton142,'enable','on')
set(handles.pushbutton143,'enable','on')
set(handles.pushbutton2,'enable','off')
set(handles.pushbutton5,'enable','off')
set(handles.pushbutton6,'enable','off')
set(handles.pushbutton7,'enable','off')
set(handles.pushbutton8,'enable','off')
set(handles.pushbutton9,'enable','off')
set(handles.pushbutton10,'enable','off')
set(handles.pushbutton11,'enable','off')
set(handles.pushbutton145,'enable','off')
set(handles.pushbutton35,'enable','on')
% axes(handles.axes4);
ylabel(ax4,'Concentration')


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%---------------------------SELECTING SHAPE-------------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% select profile shape 1: erf forward
function pushbutton2_Callback(~, ~, handles) %#ok<DEFNU>
brush off
set(handles.pushbutton5,'enable','off')
set(handles.pushbutton6,'enable','off')
set(handles.pushbutton7,'enable','off')
set(handles.pushbutton8,'enable','off')
set(handles.pushbutton9,'enable','off')
set(handles.pushbutton10,'enable','off')
set(handles.pushbutton11,'enable','off')
set(handles.pushbutton13,'enable','on')
set(handles.pushbutton36,'enable','on')
set(handles.pushbutton35,'enable','off')
set(handles.pushbutton145,'enable','off')
set(handles.edit10, 'enable', 'on')
handles.edit10.String = '';
global p;
p=1;
end
% select profile shape 2: erf backwards
function pushbutton5_Callback(~, ~, handles) %#ok<DEFNU>
brush off
set(handles.pushbutton2,'enable','off')
set(handles.pushbutton6,'enable','off')
set(handles.pushbutton7,'enable','off')
set(handles.pushbutton8,'enable','off')
set(handles.pushbutton9,'enable','off')
set(handles.pushbutton10,'enable','off')
set(handles.pushbutton11,'enable','off')
set(handles.pushbutton13,'enable','on')
set(handles.pushbutton36,'enable','on')
set(handles.pushbutton35,'enable','off')
set(handles.pushbutton145,'enable','off')
set(handles.edit10, 'enable', 'on')
handles.edit10.String = '';
global p;
p=2;
end
% select profile shape 3: U
function pushbutton6_Callback(~, ~, handles) %#ok<DEFNU>
brush off
set(handles.pushbutton2,'enable','off')
set(handles.pushbutton5,'enable','off')
set(handles.pushbutton7,'enable','off')
set(handles.pushbutton8,'enable','off')
set(handles.pushbutton9,'enable','off')
set(handles.pushbutton10,'enable','off')
set(handles.pushbutton11,'enable','off')
set(handles.pushbutton13,'enable','on')
set(handles.pushbutton36,'enable','on')
set(handles.pushbutton35,'enable','off')
set(handles.pushbutton145,'enable','off')
set(handles.edit9, 'enable', 'on')
handles.edit9.String = '';
set(handles.edit10, 'enable', 'on')
handles.edit10.String = '';
global p;
p=3;
end
% select profile shape 4: upside down U
function pushbutton7_Callback(~, ~, handles) %#ok<DEFNU>
brush off
set(handles.pushbutton2,'enable','off')
set(handles.pushbutton5,'enable','off')
set(handles.pushbutton6,'enable','off')
set(handles.pushbutton8,'enable','off')
set(handles.pushbutton9,'enable','off')
set(handles.pushbutton10,'enable','off')
set(handles.pushbutton11,'enable','off')
set(handles.pushbutton13,'enable','on')
set(handles.pushbutton36,'enable','on')
set(handles.pushbutton35,'enable','off')
set(handles.pushbutton145,'enable','off')
set(handles.edit9, 'enable', 'on')
handles.edit9.String = '';
set(handles.edit10, 'enable', 'on')
handles.edit10.String = '';
global p;
p=4;
end
% select profile shape 5: bottom to left erf
function pushbutton8_Callback(~, ~, handles) %#ok<DEFNU>
brush off
set(handles.pushbutton2,'enable','off')
set(handles.pushbutton5,'enable','off')
set(handles.pushbutton6,'enable','off')
set(handles.pushbutton7,'enable','off')
set(handles.pushbutton9,'enable','off')
set(handles.pushbutton10,'enable','off')
set(handles.pushbutton11,'enable','off')
set(handles.pushbutton13,'enable','on')
set(handles.pushbutton36,'enable','on')
set(handles.pushbutton35,'enable','off')
set(handles.pushbutton145,'enable','off')
set(handles.edit10, 'enable', 'on')
handles.edit10.String = '';
global p;
p=5;
end
% select profile shape 6: top to left erf
function pushbutton9_Callback(~, ~, handles) %#ok<DEFNU>
brush off
set(handles.pushbutton2,'enable','off')
set(handles.pushbutton5,'enable','off')
set(handles.pushbutton6,'enable','off')
set(handles.pushbutton7,'enable','off')
set(handles.pushbutton8,'enable','off')
set(handles.pushbutton10,'enable','off')
set(handles.pushbutton11,'enable','off')
set(handles.pushbutton13,'enable','on')
set(handles.pushbutton36,'enable','on')
set(handles.pushbutton35,'enable','off')
set(handles.pushbutton145,'enable','off')
set(handles.edit10, 'enable', 'on')
handles.edit10.String = '';
global p;
p=6;
end
% select profile shape 7: top to right erf
function pushbutton10_Callback(~, ~, handles) %#ok<DEFNU>
brush off
set(handles.pushbutton2,'enable','off')
set(handles.pushbutton5,'enable','off')
set(handles.pushbutton6,'enable','off')
set(handles.pushbutton7,'enable','off')
set(handles.pushbutton8,'enable','off')
set(handles.pushbutton9,'enable','off')
set(handles.pushbutton11,'enable','off')
set(handles.pushbutton13,'enable','on')
set(handles.pushbutton36,'enable','on')
set(handles.pushbutton35,'enable','off')
set(handles.pushbutton145,'enable','off')
set(handles.edit9, 'enable', 'on')
handles.edit9.String = '';
set(handles.edit10, 'enable', 'on')
handles.edit10.String = '';
global p;
p=7;
end
% select profile shape 8: bottom to right erf
function pushbutton11_Callback(~, ~, handles) %#ok<DEFNU>
brush off
set(handles.pushbutton2,'enable','off')
set(handles.pushbutton5,'enable','off')
set(handles.pushbutton6,'enable','off')
set(handles.pushbutton7,'enable','off')
set(handles.pushbutton8,'enable','off')
set(handles.pushbutton9,'enable','off')
set(handles.pushbutton10,'enable','off')
set(handles.pushbutton13,'enable','on')
set(handles.pushbutton36,'enable','on')
set(handles.pushbutton35,'enable','off')
set(handles.pushbutton145,'enable','off')
set(handles.edit9, 'enable', 'on')
handles.edit9.String = '';
set(handles.edit10, 'enable', 'on')
handles.edit10.String = '';
global p;
p=8;
end
% reset2: profile shapes
function pushbutton36_Callback(~, ~, handles) %#ok<DEFNU>
brush off
set(handles.pushbutton2,'enable','on')
set(handles.pushbutton5,'enable','on')
set(handles.pushbutton6,'enable','on')
set(handles.pushbutton7,'enable','on')
set(handles.pushbutton8,'enable','on')
set(handles.pushbutton9,'enable','on')
set(handles.pushbutton10,'enable','on')
set(handles.pushbutton11,'enable','on')
set(handles.pushbutton35,'enable','on')
set(handles.pushbutton36,'enable','off')
set(handles.pushbutton145,'enable','on')
set(handles.pushbutton13,'enable','off')
set(handles.edit9, 'enable', 'off')
handles.edit9.String = '';
set(handles.edit10, 'enable', 'off')
handles.edit10.String = '';
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%-----------------------TWO EDIT BOXES------------------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% add in the right hand position if necessary
function edit9_Callback(hObject, ~, handles) %#ok<DEFNU>
brush off
global right_edge;
global factor
global p
right_edge=get(hObject,'String');
right_edge=str2double(right_edge);
right_edge=right_edge/factor;
set(handles.pushbutton13,'enable','on')
end
function edit9_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end
% guess edit
function edit10_Callback(hObject, ~, ~) %#ok<DEFNU>
brush off
global profile_length_guess;
global factor
profile_length_guess=get(hObject,'String');
profile_length_guess=str2double(profile_length_guess);
profile_length_guess=profile_length_guess/factor;
end
function edit10_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%-------------------------------FIT 1-------------------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function pushbutton13_Callback(~, ~, handles) %#ok<DEFNU>
brush off
global profile_length_guess;
global right_edge;
global profile_length;
global profile;
global p;
global factor;
global logDt;
global logDt_err;
global c1;
global c1_err;
global c2;
global c2_err;
global t0; % text in top fig
global l0; % line in top fig
global mp; % midpoint of curve / inflexion, where appropriate
global model;
global model_profile_length;
global ax4;

set(handles.togglebutton17,'enable','on')

if p*isempty(right_edge)==7 || p*isempty(right_edge)==8
    errordlg('Please enter a right hand edge position','Boundary Position Error');
else
    set(handles.pushbutton17,'enable','on')
    set(handles.pushbutton19,'enable','on')
    set(handles.pushbutton20,'enable','on')
    set(handles.pushbutton24,'enable','on')
    set(handles.pushbutton37,'enable','on')
    set(handles.pushbutton208,'enable','on')
    set(handles.pushbutton36,'enable','off')
    if profile_length_guess>0
        guess=log10((profile_length_guess/2)^2);
        guess_present=1;
    else
        guess_present=0;
        if factor==1
            guess=2;
        elseif factor==1000
            guess=-4;
        elseif factor==1000000
            guess=-10;
        elseif factor==1000000000
            guess=-16;
        end
    end
    if p==1 || p==2
        if exist('l0','var')==1
            delete(l0);
        end
        if exist('t0','var')==1
            delete(t0);
        end
        fun = @(x,profile_length) x(2)+(x(1)-x(2))*0.5*erfc(((profile_length-x(3)))/(2*sqrt(10^(x(4)))));
        warning('off')
        if guess_present==0
            MSE_min=1e10;
            for g=[-6 -4 -2 0 2 4 6]
                if p==1
                    x0 = [min(profile),max(profile),mean(profile_length),guess+g];
                elseif p==2
                    x0 = [max(profile),min(profile),mean(profile_length),guess+g];
                end
                [x,R,J,~,MSE]=nlinfit(profile_length,profile,fun,x0);
                ci = nlparci(x,R,'jacobian',J);
                if MSE<MSE_min
                    MSE_min=MSE;
                    x_min=x;
                    ci_min=ci;
                end
                
            end
            x=x_min;
            ci=ci_min;
        elseif guess_present==1
            if p==1
                x0 = [min(profile),max(profile),mean(profile_length),guess];
            elseif p==2
                x0 = [max(profile),min(profile),mean(profile_length),guess];
            end
            [x,R,J,]=nlinfit(profile_length,profile,fun,x0);
            ci = nlparci(x,R,'jacobian',J);
        end
        model_profile_length=(min(profile_length):(max(profile_length)-min(profile_length))/300:max(profile_length));
        model=x(2)+(x(1)-x(2))*0.5*erfc(((model_profile_length-x(3)))/(2*sqrt(10^(x(4)))));
        c1=x(1);
        c1_err=(ci(1,2)-ci(1,1))/2;
        c2=x(2);
        c2_err=(ci(2,2)-ci(2,1))/2;
        logDt_err=(ci(4,2)-ci(4,1))/2;
        l0=plot(ax4,model_profile_length*factor,model,'Color','blue','LineWidth',1.5);
        if p==1
            t0=text(ax4,((max(model_profile_length*factor)-min(model_profile_length*factor))*0.65+min(model_profile_length*factor)),(((max(model)-min(model))*0.5+min(model))), sprintf('%s%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(4)))));
        elseif p==2
            t0=text(ax4,((max(model_profile_length*factor)-min(model_profile_length*factor))*0.65+min(model_profile_length*factor)),(((max(model)-min(model))*0.5+min(model))),sprintf('%s%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(4)))));
        end
        logDt=x(4);
        mp=x(3);
        
    end
    
    if p==3 || p==4
        if exist('l0','var')==1
            delete(l0);
        end
        if exist('t0','var')==1
            delete(t0);
        end
        if  isempty(right_edge)==0
            fun = @(x,profile_length) x(2)+(x(1)-x(2))*(erfc(((profile_length))/(2*sqrt(10^(x(3)))))+erfc((((right_edge-profile_length)))/(2*sqrt(10^(x(3))))));
            warning('off')
            
            if guess_present==0
                MSE_min=1e10;
                for g=[-6 -4 -2 0 2 4 6]
                    if p==3
                        x0 = [max(profile),min(profile),guess+g];
                    elseif p==4
                        x0 = [min(profile),max(profile),guess+g];
                    end
                    [x,R,J,~,MSE]=nlinfit(profile_length,profile,fun,x0);
                    ci = nlparci(x,R,'jacobian',J);
                    
                    if MSE<MSE_min
                        MSE_min=MSE;
                        x_min=x;
                        ci_min=ci;
                    end
                    
                end
                x=x_min;
                ci=ci_min;
            elseif guess_present==1
                if p==3
                    x0 = [max(profile),min(profile),guess];
                elseif p==4
                    x0 = [min(profile),max(profile),guess];
                end
                [x,R,J,]=nlinfit(profile_length,profile,fun,x0);
                ci = nlparci(x,R,'jacobian',J);
            end
            model_profile_length=(0:(right_edge-min(profile_length))/300:right_edge);
            model=x(2)+(x(1)-x(2))*(erfc(((model_profile_length))/(2*sqrt(10^(x(3)))))+erfc((((right_edge-model_profile_length)))/(2*sqrt(10^(x(3))))));
            c1=x(1);
            c1_err=(ci(1,2)-ci(1,1))/2;
            c2=x(2);
            c2_err=(ci(2,2)-ci(2,1))/2;
            logDt_err=(ci(3,2)-ci(3,1))/2;
            l0=plot(ax4,model_profile_length*factor,model,'Color','blue','LineWidth',1.5);
            xlim(ax4,[min(model_profile_length) right_edge*factor])
            if p==3
                t0=text(ax4,((max(model_profile_length*factor)-min(model_profile_length*factor))*0.3+min(model_profile_length*factor)),(((max(model)-min(model))*0.7+min(model))),sprintf('%s%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(3)))));
            elseif p==4
                t0=text(ax4,((max(model_profile_length*factor)-min(model_profile_length*factor))*0.3+min(model_profile_length*factor)),(((max(model)-min(model))*0.2+min(model))),sprintf('%s%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(3)))));
            end
            logDt=x(3);
        else
            fun = @(x,profile_length) x(2)+(x(1)-x(2))*(erfc(((profile_length))/(2*sqrt(10^(x(3)))))+erfc((((x(4)-profile_length)))/(2*sqrt(10^(x(3))))));
            warning('off')
            if guess_present==0
                MSE_min=1e10;
                for g=[-6 -4 -2 0 2 4 6]
                    if p==3
                        x0 = [max(profile),min(profile),guess+g,max(profile_length)];
                    elseif p==4
                        x0 = [min(profile),max(profile),guess+g,max(profile_length)];
                    end
                    [x,R,J,~,MSE]=nlinfit(profile_length,profile,fun,x0);
                    ci = nlparci(x,R,'jacobian',J);
                    
                    if MSE<MSE_min
                        MSE_min=MSE;
                        x_min=x;
                        ci_min=ci;
                    end
                    
                end
                x=x_min;
                ci=ci_min;
            elseif guess_present==1
                if p==3
                    x0 = [max(profile),min(profile),guess,max(profile_length)];
                elseif p==4
                    x0 = [min(profile),max(profile),guess,max(profile_length)];
                end
                [x,R,J,]=nlinfit(profile_length,profile,fun,x0);
                ci = nlparci(x,R,'jacobian',J);
            end
            model_profile_length=(0:(max(profile_length)-min(profile_length))/300:x(4));
            model=x(2)+(x(1)-x(2))*(erfc(((model_profile_length))/(2*sqrt(10^(x(3)))))+erfc((((x(4)-model_profile_length)))/(2*sqrt(10^(x(3))))));
            c1=x(1);
            c1_err=(ci(1,2)-ci(1,1))/2;
            c2=x(2);
            c2_err=(ci(2,2)-ci(2,1))/2;
            logDt_err=(ci(3,2)-ci(3,1))/2;
            l0=plot(ax4,model_profile_length*factor,model,'Color','blue','LineWidth',1.5);
            xlim(ax4,[min(model_profile_length) x(4)*factor])
            if p==3
                t0=text(ax4,((max(model_profile_length*factor)-min(model_profile_length*factor))*0.3+min(model_profile_length*factor)),(((max(model)-min(model))*0.8+min(model))),sprintf('%s%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(3)))));
            elseif p==4
                t0=text(ax4,((max(model_profile_length*factor)-min(model_profile_length*factor))*0.3+min(model_profile_length*factor)),(((max(model)-min(model))*0.3+min(model))),sprintf('%s%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(3)))));
            end
            
            logDt=x(3);
            right_edge=x(4);
        end
    end
    if p==5 || p==6
        if exist('l0','var')==1
            delete(l0);
        end
        if exist('t0','var')==1
            delete(t0);
        end
        fun = @(x,profile_length) x(2)+(x(1)-x(2))*(erfc(((profile_length))/(2*sqrt(10^(x(3))))));
        warning('off')
        if guess_present==0
            MSE_min=1e10;
            for g=[-6 -4 -2 0 2 4 6]
                if p==5
                    x0 = [min(profile),max(profile),guess+g];
                elseif p==6
                    x0 = [max(profile),min(profile),guess+g];
                end
                [x,R,J,~,MSE]=nlinfit(profile_length,profile,fun,x0);
                
                ci = nlparci(x,R,'jacobian',J);
                if MSE<MSE_min
                    MSE_min=MSE;
                    x_min=x;
                    ci_min=ci;
                end
                
            end
            x=x_min;
            ci=ci_min;
        elseif guess_present==1
            if p==5
                x0 = [min(profile),max(profile),guess];
            elseif p==6
                x0 = [max(profile),min(profile),guess];
            end
            [x,R,J,]=nlinfit(profile_length,profile,fun,x0);
            ci = nlparci(x,R,'jacobian',J);
        end
        model_profile_length=(0:(max(profile_length)-min(profile_length))/300:max(profile_length));
        model=x(2)+(x(1)-x(2))*(erfc(((model_profile_length))/(2*sqrt(10^(x(3))))));
        l0=plot(ax4,model_profile_length*factor,model,'Color','blue','LineWidth',1.5);
        if p==5
            t0=text(ax4,((max(model_profile_length*factor)-min(model_profile_length*factor))*0.6+min(model_profile_length*factor)),(((max(model)-min(model))*0.6+min(model))),sprintf('%s%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(3)))));
        elseif p==6
            t0=text(ax4,((max(model_profile_length*factor)-min(model_profile_length*factor))*0.6+min(model_profile_length*factor)),(((max(model)-min(model))*0.6+min(model))),sprintf('%s%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(3)))));
        end
        xlim(ax4,[0 max(model_profile_length)*factor])
        logDt=x(3);
        c1=x(1);
        c1_err=(ci(1,2)-ci(1,1))/2;
        c2=x(2);
        c2_err=(ci(2,2)-ci(2,1))/2;
        logDt_err=(ci(3,2)-ci(3,1))/2;
    end
    
    if p==7 || p==8
        if exist('l0','var')==1
            delete(l0);
        end
        if exist('t0','var')==1
            delete(t0);
        end
        fun = @(x,profile_length) (x(2)+(x(1)-x(2))*(erfc(((right_edge-profile_length))/(2*sqrt(10^(x(3)))))));
        warning('off')
        if guess_present==0
            MSE_min=1e10;
            for g=[-6 -4 -2 0 2 4 6]
                if p==7
                    x0 = [max(profile),min(profile),guess+g];
                elseif p==8
                    x0 = [min(profile),max(profile),guess+g,max(profile_length)];
                end
                [x,R,J,~,MSE]=nlinfit(profile_length,profile,fun,x0);
                
                ci = nlparci(x,R,'jacobian',J);
                if MSE<MSE_min
                    MSE_min=MSE;
                    x_min=x;
                    ci_min=ci;
                end
                
            end
            x=x_min;
            ci=ci_min;
        elseif guess_present==1
            if p==7
                x0 = [max(profile),min(profile),guess];
            elseif p==8
                x0 = [min(profile),max(profile),guess,max(profile_length)];
            end
            [x,R,J]=nlinfit(profile_length,profile,fun,x0);
            
            ci = nlparci(x,R,'jacobian',J);
        end
        model_profile_length=(min(profile_length):(right_edge-min(profile_length))/300:right_edge);
        model=(x(2)+(x(1)-x(2))*(erfc(((right_edge-model_profile_length))/(2*sqrt(10^(x(3)))))));
        l0=plot(ax4,model_profile_length*factor,model,'Color','blue','LineWidth',1.5);
        xlim(ax4,[min(model_profile_length) right_edge*factor])
        if p==7
            t0=text(ax4,((max(model_profile_length*factor)-min(model_profile_length*factor))*0.05+min(model_profile_length*factor)),(((max(model)-min(model))*0.6+min(model))),sprintf('%s%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(3)))));
        elseif p==8
            t0=text(ax4,((max(model_profile_length*factor)-min(model_profile_length*factor))*0.05+min(model_profile_length*factor)),(((max(model)-min(model))*0.45+min(model))),sprintf('%s%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(3)))));
        end  
        logDt=x(3);
        c1=x(1);
        c1_err=(ci(1,2)-ci(1,1))/2;
        c2=x(2);
        c2_err=(ci(2,2)-ci(2,1))/2;
        logDt_err=(ci(3,2)-ci(3,1))/2;
    end
t0.FontUnits='pixels';
t0.FontSize=10;    
end

ylim(ax4,'auto');
set(handles.pushbutton13,'enable','off')
end
% reset 3: fit
function pushbutton37_Callback(~, ~, handles) %#ok<DEFNU>
brush off
set(handles.pushbutton13,'enable','on')
set(handles.pushbutton36,'enable','on')
global right_edge
% right_edge=[];
% set(handles.edit9,'String','');
global profile_length
global profile
global factor
global i
global s0
global ax4;
global profile_length_brushed;
global profile_brushed;
global s0e;
% axes(handles.axes4);
global ax6
cla(ax6,'reset')
cla(ax4,'reset')
s0=scatter(ax4,profile_length*factor,profile, 'filled','MarkerEdgeColor','black','MarkerFaceColor',[0.5 0.5 0.5]);
hold(ax4,'on')
if isempty(profile_length_brushed)==0
    s0e=scatter(ax4,profile_length_brushed*factor,profile_brushed, 'filled','MarkerEdgeColor','black','MarkerFaceColor',[0.5 0.5 0.5],'MarkerFaceAlpha',0.25,'MarkerEdgeAlpha',0.25, 'DisplayName','Deleted data');
end
if i==1 % imported data
    xlim(ax4,[min(profile_length*factor) max(profile_length*factor)])
elseif i==2 % random data
    xlim(ax4,[0 max(profile_length*factor)])
end
set(handles.pushbutton17,'enable','off')
set(handles.pushbutton19,'enable','off')
set(handles.pushbutton20,'enable','off')
set(handles.pushbutton24,'enable','off')
set(handles.pushbutton36,'enable','on')
set(handles.pushbutton37,'enable','off')
set(handles.pushbutton208,'enable','off')
set(handles.togglebutton17,'enable','off')
set(handles.pushbutton13,'enable','on')
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%------------------------------BEAM SHAPES--------------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% circle beam
function pushbutton17_Callback(~, ~, handles) %#ok<DEFNU>
brush off
set(handles.pushbutton17,'enable','on')
set(handles.pushbutton19,'enable','off')
set(handles.pushbutton20,'enable','off')
set(handles.pushbutton24,'enable','off')
set(handles.pushbutton37,'enable','off')
set(handles.pushbutton38,'enable','on')
set(handles.pushbutton208,'enable','off')
global width
global factor
width=[]; %#ok<*NASGU>
global b
b=1;
prompt={'Diameter'};
dlgtitle='Diameter Input';
dims=[1 35];
definput={''};
width=str2double(cell2mat(newid(prompt,dlgtitle,dims,definput)));
width=width/factor;
if isnan(width)==0
set(handles.pushbutton21,'enable','on')   
end    
end
% square beam
function pushbutton19_Callback(~, ~, handles) %#ok<DEFNU>
brush off
set(handles.pushbutton17,'enable','off')
set(handles.pushbutton19,'enable','on')
set(handles.pushbutton20,'enable','off')
set(handles.pushbutton24,'enable','off')
set(handles.pushbutton37,'enable','off')
set(handles.pushbutton38,'enable','on')
set(handles.pushbutton208,'enable','off')

global width
global factor
width=[];
global b
b=2;
prompt={'Width'};
dlgtitle='Width Input';
dims=[1 35];
definput={''};
width=str2double(cell2mat(newid(prompt,dlgtitle,dims,definput)));
width=width/factor;
if isnan(width)==0
set(handles.pushbutton21,'enable','on')   
end
end
% gauss beam
function pushbutton20_Callback(~, ~, handles) %#ok<DEFNU>
brush off
set(handles.pushbutton17,'enable','off')
set(handles.pushbutton19,'enable','off')
set(handles.pushbutton20,'enable','on')
set(handles.pushbutton24,'enable','off')
set(handles.pushbutton37,'enable','off')
set(handles.pushbutton38,'enable','on')
set(handles.pushbutton208,'enable','off')

global FWHM
global factor
FWHM=[];
global b
b=3;
prompt={'Full Width at Half Maximum (FWHM)'};
dlgtitle='FWHM Input';
dims=[1 35];
definput={''};
FWHM=str2double(cell2mat(newid(prompt,dlgtitle,dims,definput)));
FWHM=FWHM/factor;
if isnan(FWHM)==0
set(handles.pushbutton21,'enable','on')   
end
end
% lorentz beam
function pushbutton24_Callback(~, ~, handles) %#ok<DEFNU>
brush off
set(handles.pushbutton17,'enable','off')
set(handles.pushbutton19,'enable','off')
set(handles.pushbutton20,'enable','off')
set(handles.pushbutton24,'enable','on')
set(handles.pushbutton37,'enable','off')
set(handles.pushbutton38,'enable','on')
set(handles.pushbutton208,'enable','off')

global FWHM %#ok<*REDEFGG>
global factor
FWHM=[];
global b
b=4;
prompt={'Full Width at Half Maximum (FWHM)'};
dlgtitle='FWHM Input';
dims=[1 35];
definput={''};
FWHM=str2double(cell2mat(newid(prompt,dlgtitle,dims,definput)));
FWHM=FWHM/factor;
if isnan(FWHM)==0
set(handles.pushbutton21,'enable','on')   
end
end

% voigt shape
function pushbutton208_Callback(~, ~, handles) %#ok<DEFNU>
brush off
set(handles.pushbutton17,'enable','off')
set(handles.pushbutton19,'enable','off')
set(handles.pushbutton20,'enable','off')
set(handles.pushbutton24,'enable','off')
set(handles.pushbutton37,'enable','off')
set(handles.pushbutton38,'enable','on')
set(handles.pushbutton208,'enable','on')

global factor
global b
b=5;
prompt={'FWHM Gauss','FWHM Lorentz'};
dlgtitle='FWHM Input';
dims=[1 35];
definput={'',''};
answer=newid(prompt,dlgtitle,dims,definput);
global FWHM_G
FWHM_G=[];
FWHM_G=str2double(cell2mat(answer(1)));
FWHM_G=FWHM_G/factor;
global FWHM_L
FWHM_L=[];
FWHM_L=str2double(cell2mat(answer(2)));
FWHM_L=FWHM_L/factor;
if isnan(FWHM_G)==0 && isnan(FWHM_L)==0
set(handles.pushbutton21,'enable','on')   
end
end

% reset button beam shape
function pushbutton38_Callback(~, ~, handles) %#ok<DEFNU>
brush off
set(handles.pushbutton38,'enable','off')
set(handles.pushbutton37,'enable','on')
set(handles.pushbutton17,'enable','on')
set(handles.pushbutton19,'enable','on')
set(handles.pushbutton20,'enable','on')
set(handles.pushbutton24,'enable','on')
set(handles.pushbutton21,'enable','off')
set(handles.pushbutton208,'enable','on')
set(handles.pushbutton210,'enable','off');
set(handles.pushbutton211,'enable','off');
set(handles.pushbutton212,'enable','off');
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%----------------------------DECONVOLUTE----------------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function pushbutton21_Callback(~, ~, handles) %#ok<DEFNU>
brush off
global p;
global b;
global profile_length;
global profile;
global width;
global FWHM;
global FWHM_L;
global FWHM_G;
global factor;
global logDt;
global c1; %associated with first fit
global c2; %associated with first fit
global c1n; %associated with second fit
global c2n; %associated with second fit
global c1n_err; %associated with second fit
global c2n_err; %associated with second fit
global l1;
global l2;
global t1;
global logDt2;
global logDt2_err;
global ylim_initial;
global mp;
global s;
global right_edge;
global lgd;
global c_units;
global model_x;
global convoluted;
global original;
global ax6;
global profile_length_brushed;
global profile_brushed;
global se;
global profile_length_original;
min_length=mean(diff(profile_length));
cla(ax6,'reset');
s=scatter(ax6,profile_length*factor,profile, 'filled','MarkerEdgeColor','black','MarkerFaceColor',[0.5 0.5 0.5], 'DisplayName','Data');
ax6.FontUnits='pixels';
ax6.FontSize=10;
hold (ax6,'on')

if isempty(profile_length_brushed)==0
    se=scatter(ax6,profile_length_brushed*factor,profile_brushed, 'filled','MarkerEdgeColor','black','MarkerFaceColor',[0.5 0.5 0.5],'MarkerFaceAlpha',0.25,'MarkerEdgeAlpha',0.25, 'DisplayName','Deleted data');
end

if b==5 % get FWHM effective for voigt
    FWHM=(0.5346*FWHM_L+sqrt(0.2166*FWHM_L^2+FWHM_G^2));
end

if p==1 || p==2
    xlim(ax6,[min(profile_length_original) max(profile_length_original)]);
elseif p==3 || p==4
    xlim(ax6,[0 right_edge*factor]);
elseif p==5 || p==6
    xlim(ax6,[0 max(profile_length_original)]);
elseif p==7|| p==8
    xlim(ax6,[min(profile_length_original) right_edge*factor]);
end

ylim auto

if factor==1
    xlabel(ax6,'Distance (m)')
elseif factor==1000
    xlabel(ax6,'Distance (mm)')
elseif factor==1000000
    xlabel(ax6,'Distance (µm)')
elseif factor==1000000000
    xlabel(ax6,'Distance (nm)')
end

if c_units==1
    ylabel(ax6,'Concentration (wt.ppm)')
elseif c_units==2
    ylabel(ax6,'Concentration (wt.%)')
else
    ylabel(ax6,'Concentration')
end

hold(ax6,'on');


%% create the model_x vectors
if b==1||b==2
    dx=min([width/4 ((max(profile_length))-min(profile_length))/(max([25 (max(size(profile_length)))])*4)]);
elseif b==3||b==4||b==5
    dx=min([FWHM/4 ((max(profile_length))-min(profile_length))/(max([25 (max(size(profile_length)))])*4)]);
end

if p==1 || p==2
    model_x=min(profile_length)-(max(profile_length)-min(profile_length))/2:dx:max(profile_length)+(max(profile_length)-min(profile_length))/2;
elseif p==3 || p==4
    model_x=0:dx:right_edge;
    
elseif p==5 || p==6
    model_x=0:dx:max(profile_length)*1.5;
elseif p==7 || p==8
    %     model_x=[0-max(profile_length):dx:max(profile_length)*2];
    model_x=min(profile_length)-(max(profile_length)-min(profile_length))/2:dx:right_edge;
end


%% create the props matrices
if b==1
    [X,Y] = meshgrid(0:dx:width,0:dx:width);
    centre=[mean(mean(X,1)) mean(mean(Y,2))];
    dist=sqrt(abs(X-centre(1)).^2+abs(Y-centre(2)).^2);
    dist(dist>width/2)=NaN;
    dist(~isnan(dist))=1;
    dist(isnan(dist))=0;
    proportions=sum(dist)./(sum(sum(dist)));
    proportions=[zeros(1,floor((size(model_x,2)-size(proportions,2))/2)) proportions zeros(1,ceil((size(model_x,2)-size(proportions,2))/2))];
    props_matrix=zeros(size(proportions,2)+400,size(model_x,2));
    for k=1:size(props_matrix,2)
        props_matrix(:,(k))=circshift([zeros(1,200) proportions zeros(1,200)]',(k-round(size(props_matrix,2)/2)));
    end
    props_matrix(1:200,:)=[];
    props_matrix=flipud(props_matrix);
    props_matrix(1:200,:)=[];
    props_matrix=flipud(props_matrix);
    pmsum=1./(sum(props_matrix));
elseif b==2
    n_conv=round(width/mean(diff(model_x)));
    proportions=ones(1,n_conv);
    proportions=proportions./sum(proportions);
    proportions=[zeros(1,floor((size(model_x,2)-size(proportions,2))/2)) proportions zeros(1,ceil((size(model_x,2)-size(proportions,2))/2))];
    props_matrix=zeros(size(proportions,2)+400,size(model_x,2));
    for k=1:size(props_matrix,2)
        props_matrix(:,(k))=circshift([zeros(1,200) proportions zeros(1,200)]',(k-round(size(props_matrix,2)/2)));
    end
    props_matrix(1:200,:)=[];
    props_matrix=flipud(props_matrix);
    props_matrix(1:200,:)=[];
    props_matrix=flipud(props_matrix);
    pmsum=1./(sum(props_matrix));
elseif b==3
    sigma=FWHM/2.355;
    proportions=exp(-((model_x-mean(model_x)).^2./(2.*sigma.^2)));
    proportions=proportions./sum(proportions);
    proportions=[zeros(1,floor((size(model_x,2)-size(proportions,2))/2)) proportions zeros(1,ceil((size(model_x,2)-size(proportions,2))/2))];
    props_matrix=zeros(size(proportions,2)+400,size(model_x,2));
    for k=1:size(props_matrix,2)
        props_matrix(:,(k))=circshift([zeros(1,200) proportions zeros(1,200)]',(k-round(size(props_matrix,2)/2)));
    end
    props_matrix(1:200,:)=[];
    props_matrix=flipud(props_matrix);
    props_matrix(1:200,:)=[];
    props_matrix=flipud(props_matrix);
    pmsum=1./(sum(props_matrix));
elseif b==4
    proportions=(1./pi).*((0.5.*FWHM)./((model_x-mean(model_x)).^2+(0.5.*FWHM).^2));
    proportions=proportions./sum(proportions);
    proportions=[zeros(1,floor((size(model_x,2)-size(proportions,2))/2)) proportions zeros(1,ceil((size(model_x,2)-size(proportions,2))/2))];
    props_matrix=zeros(size(proportions,2)+400,size(model_x,2));
    for k=1:size(props_matrix,2)
        props_matrix(:,(k))=circshift([zeros(1,200) proportions zeros(1,200)]',(k-round(size(props_matrix,2)/2)));
    end
    props_matrix(1:200,:)=[];
    props_matrix=flipud(props_matrix);
    props_matrix(1:200,:)=[];
    props_matrix=flipud(props_matrix);
    pmsum=1./(sum(props_matrix));
elseif b==5
    proportions=((1.36603*(FWHM_L/(0.5346*FWHM_L+sqrt(0.2166*FWHM_L^2+FWHM_G^2)))-0.47719*(FWHM_L/(0.5346*FWHM_L+sqrt(0.2166*FWHM_L^2+FWHM_G^2)))^2+0.11116*(FWHM_L/(0.5346*FWHM_L+sqrt(0.2166*FWHM_L^2+FWHM_G^2)))^3)*((1./(pi*(0.5.*(FWHM_L+1e-10)))).*(((0.5.*(FWHM_L+1e-10))^2)./((model_x-mean(model_x)).^2+(0.5.*(FWHM_L+1e-10)).^2)))+(1-(1.36603*(FWHM_L/(0.5346*FWHM_L+sqrt(0.2166*FWHM_L^2+FWHM_G^2)))-0.47719*(FWHM_L/(0.5346*FWHM_L+sqrt(0.2166*FWHM_L^2+FWHM_G^2)))^2+0.11116*(FWHM_L/(0.5346*FWHM_L+sqrt(0.2166*FWHM_L^2+FWHM_G^2)))^3))*((1/(((FWHM_G+1e-10)/2.355)*sqrt(2*pi)))*exp(-0.5.*((model_x-mean(model_x))./((FWHM_G+1e-10)/2.355)).^2)));
    proportions=proportions./sum(proportions);
    proportions=[zeros(1,floor((size(model_x,2)-size(proportions,2))/2)) proportions zeros(1,ceil((size(model_x,2)-size(proportions,2))/2))];
    props_matrix=zeros(size(proportions,2)+400,size(model_x,2));
    for k=1:size(props_matrix,2)
        props_matrix(:,(k))=circshift([zeros(1,200) proportions zeros(1,200)]',(k-round(size(props_matrix,2)/2)));
    end
    props_matrix(1:200,:)=[];
    props_matrix=flipud(props_matrix);
    props_matrix(1:200,:)=[];
    props_matrix=flipud(props_matrix);
    pmsum=1./(sum(props_matrix));
end
if p==1   || p==2
    [~,index1]=min(abs(model_x-min(profile_length)));
    [~,index2]=min(abs(model_x-max(profile_length)));
    options = optimset('Display','off');
    fun=@(x) (f_convolution(x(1),x(2),model_x,x(3),props_matrix,x(4),profile_length,index1,index2,pmsum))-profile;
    lb=[-1e20 -1e20 -50 -1e100];
    ub=[1e20 1e20 logDt 1e100];
    rsn_min=1e10;
    f=waitbar(0,'Deconvoluting...');
    pause(0.0000000001);
    for k=[0 0.2 0.4 0.6 0.8 1 2 3 5 10]
        x0=[c1,c2,logDt-k,mp];
        [x,resnorm,R,~,~,~,J] = lsqnonlin(fun,x0,lb,ub,options);
        ci = nlparci(x,R,'jacobian',J);
        if resnorm<rsn_min
            rsn_min=resnorm;
            x_min=x;
            ci_min=ci;
        end
        waitbar(k/10,f,'Deconvoluting...');
        pause(0.0000000001);
        if k==10
            close (f)
        end
    end
    x=x_min;
    ci=ci_min;
    c1n=x(1);
    c1n_err=(ci(1,2)-ci(1,1))/2;
    c2n=x(2);
    c2n_err=(ci(2,2)-ci(2,1))/2;
    [~,convoluted,original]=(f_convolution(x(1),x(2),model_x,x(3),props_matrix,x(4),profile_length,index1,index2,pmsum));
    model_x=model_x(index1:index2);
    l1=plot(ax6,model_x*factor,original,'Color','red','LineWidth',1.5,'DisplayName','Deconvoluted');
    l2=plot(ax6,model_x*factor,convoluted,'Color','black','LineWidth',1.5,'LineStyle','--','DisplayName','Convoluted');
    logDt2=x(3);
    logDt2_err=(ci(3,2)-ci(3,1))/2;
    if p==1
        lgd=legend(ax6,'Location','northwest');
        legend(ax6,'boxoff')
        if 2*sqrt(10^logDt2)>min_length
            t1=text(ax6,((max(profile_length_original)-min(profile_length_original))*0.65+min(profile_length_original)),(((max(profile)-min(profile))*0.5+min(profile))),sprintf('%s%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(3)))));
        
        else
            t1=text(ax6,((max(profile_length_original)-min(profile_length_original))*0.65+min(profile_length_original)),(((max(profile)-min(profile))*0.5+min(profile))),sprintf('%s%s\n%s\n%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(3))),'NO RESOLVABLE', 'PROFILE'));
        end
    elseif p==2
        lgd=legend(ax6,'Location','northeast');
        legend(ax6,'boxoff')
        if 2*sqrt(10^logDt2)>min_length
            t1=text(ax6,((max(profile_length_original)-min(profile_length_original))*0.6+min(profile_length_original)),(((max(profile)-min(profile))*0.5+min(profile))),sprintf('%s%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(3)))));
        else
            t1=text(ax6,((max(profile_length_original)-min(profile_length_original))*0.6+min(profile_length_original)),(((max(profile)-min(profile))*0.5+min(profile))),sprintf('%s%s\n%s\n%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(3))),'NO RESOLVABLE', 'PROFILE'));
        end
        
    end
elseif p==3  || p==4
    [~,index1]=min(abs(model_x-0));
    [~,index2]=min(abs(model_x-right_edge));
    options = optimset('Display','off');
    fun=@(x) (f_convolution_U(x(1),x(2),model_x,x(3),props_matrix,profile_length,index1,index2,right_edge,pmsum))-profile;
    lb=[-1e20 -1e20 -50];
    ub=[1e20 1e20 logDt];
    rsn_min=1e10;
    f=waitbar(0,'Deconvoluting...');
    pause(0.0000000001);
    for k=[0 0.2 0.4 0.6 0.8 1 2 3 5 10]
        x0=[c1,c2,logDt-k];
        [x,resnorm,R,~,~,~,J] = lsqnonlin(fun,x0,lb,ub,options);
        ci = nlparci(x,R,'jacobian',J);
        if resnorm<rsn_min
            rsn_min=resnorm;
            x_min=x;
            ci_min=ci;
        end
        waitbar(k/10,f,'Deconvoluting...');
        pause(0.0000000001);
        if k==10
            close (f)
        end
    end
    x=x_min;
    ci=ci_min;
    c1n=x(1);
    c1n_err=(ci(1,2)-ci(1,1))/2;
    c2n=x(2);
    c2n_err=(ci(2,2)-ci(2,1))/2;
    [~,convoluted,original]=(f_convolution_U(x(1),x(2),model_x,x(3),props_matrix,profile_length,index1,index2,right_edge,pmsum));
    model_x=model_x(index1:index2);
    l1=plot(ax6,model_x*factor,original,'Color','red','LineWidth',1.5,'DisplayName','Deconvoluted');
    l2=plot(ax6,model_x*factor,convoluted,'Color','black','LineWidth',1.5,'LineStyle','--','DisplayName','Convoluted');
    logDt2=x(3);
    logDt2_err=(ci(3,2)-ci(3,1))/2;
    if p==3
        lgd=legend(ax6,'Location','north');
        legend(ax6,'boxoff')
        if 2*sqrt(10^logDt2)>min_length
            t1=text(ax6,((max(profile_length_original)-min(profile_length_original))*0.3+min(profile_length_original)),(((max(profile)-min(profile))*0.7+min(profile))),sprintf('%s%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(3)))));
        else
            t1=text(ax6,((max(profile_length_original)-min(profile_length_original))*0.3+min(profile_length_originalr)),(((max(profile)-min(profile))*0.7+min(profile))),sprintf('%s%s\n%s\n%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(3))),'NO RESOLVABLE', 'PROFILE'));
        end
    elseif p==4
        lgd=legend(ax6,'Location','south');
        legend(ax6,'boxoff')
        if 2*sqrt(10^logDt2)>min_length
            t1=text(ax6,((max(profile_length_original)-min(profile_length_original))*0.3+min(profile_length_original)),(((max(profile)-min(profile))*0.2+min(profile))),sprintf('%s%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(3)))));
        else
            t1=text(ax6,((max(profile_length_original)-min(profile_length_original))*0.3+min(profile_length_original)),(((max(profile)-min(profile))*0.2+min(profile))),sprintf('%s%s\n%s\n%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(3))),'NO RESOLVABLE', 'PROFILE'));
        end
    end
elseif p==5 || p==6
    [~,index1]=min(abs(model_x-0));
    [~,index2]=min(abs(model_x-max(profile_length)));
    options = optimset('Display','off');
    fun=@(x) (f_convolution_halferf(x(1),x(2),model_x,x(3),props_matrix,profile_length,index1,index2,pmsum))-profile;
    lb=[-1e20 -1e20 -50];
    ub=[1e20 1e20 logDt];
    rsn_min=1e10;
    f=waitbar(0,'Deconvoluting...');
    pause(0.0000000001);
    for k=[0 0.2 0.4 0.6 0.8 1 2 3 5 10]
        x0=[c1,c2,logDt-k];
        [x,resnorm,R,~,~,~,J] = lsqnonlin(fun,x0,lb,ub,options);
        ci = nlparci(x,R,'jacobian',J);
        if resnorm<rsn_min
            rsn_min=resnorm;
            x_min=x;
            ci_min=ci;
        end
        waitbar(k/10,f,'Deconvoluting...');
        pause(0.0000000001);
        if k==10
            close (f)
        end
    end
    x=x_min;
    ci=ci_min;
    c1n=x(1);
    c1n_err=(ci(1,2)-ci(1,1))/2;
    c2n=x(2);
    c2n_err=(ci(2,2)-ci(2,1))/2;
    [~,convoluted,original]=(f_convolution_halferf(x(1),x(2),model_x,x(3),props_matrix,profile_length,index1,index2,pmsum));
    model_x=model_x(index1:index2);
    l1=plot(ax6,model_x*factor,original,'Color','red','LineWidth',1.5,'DisplayName','Deconvoluted');
    l2=plot(ax6,model_x*factor,convoluted,'Color','black','LineWidth',1.5,'LineStyle','--','DisplayName','Convoluted');
    logDt2=x(3);
    logDt2_err=(ci(3,2)-ci(3,1))/2;
    if p==5
        lgd=legend(ax6,'Location','southeast');
        legend(ax6,'boxoff')
        if 2*sqrt(10^logDt2)>min_length
            t1=text(ax6,((max(profile_length_original)-min(profile_length_original))*0.6+min(profile_length_original)),(((max(profile)-min(profile))*0.6+min(profile))),sprintf('%s%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(3)))));
        else
            t1=text(ax6,((max(profile_length_original)-min(profile_length_original))*0.6+min(profile_length_original)),(((max(profile)-min(profile))*0.6+min(profile))),sprintf('%s%s\n%s\n%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(3))),'NO RESOLVABLE', 'PROFILE'));
        end
    elseif p==6
        lgd=legend(ax6,'Location','northeast');
        legend(ax6,'boxoff')
        if 2*sqrt(10^logDt2)>min_length
            t1=text(ax6,((max(profile_length_original)-min(profile_length_original))*0.6+min(profile_length_original)),(((max(profile)-min(profile))*0.6+min(profile))),sprintf('%s%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(3)))));
        else
            t1=text(ax6,((max(profile_length_original)-min(profile_length_original))*0.6+min(profile_length_original)),(((max(profile)-min(profile))*0.6+min(profile))),sprintf('%s%s\n%s\n%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(3))),'NO RESOLVABLE', 'PROFILE'));
        end
    end
elseif p==7 || p==8
    [~,index1]=min(abs(model_x-0));
    [~,index2]=min(abs(model_x-right_edge));
    options = optimset('Display','off');
    fun=@(x) (f_convolution_halferf_backwards(x(1),x(2),model_x,x(3),props_matrix,profile_length,index1,index2,right_edge,pmsum))-profile;
    lb=[-1e20 -1e20 -50];
    ub=[1e20 1e20 logDt];
    rsn_min=1e10;
    f=waitbar(0,'Deconvoluting...');
    pause(0.0000000001);
    for k=[0 0.2 0.4 0.6 0.8 1 2 3 5 10]
        x0=[c1,c2,logDt-k];
        [x,resnorm,R,~,~,~,J] = lsqnonlin(fun,x0,lb,ub,options);
        ci = nlparci(x,R,'jacobian',J);
        if resnorm<rsn_min
            rsn_min=resnorm;
            x_min=x;
            ci_min=ci;
        end
        waitbar(k/10,f,'Deconvoluting...');
        pause(0.0000000001);
        if k==10
            close (f)
        end
    end
    x=x_min;
    ci=ci_min;
    c1n=x(1);
    c1n_err=(ci(1,2)-ci(1,1))/2;
    c2n=x(2);
    c2n_err=(ci(2,2)-ci(2,1))/2;
    [~,convoluted,original]=(f_convolution_halferf_backwards(x(1),x(2),model_x,x(3),props_matrix,profile_length,index1,index2,right_edge,pmsum));
    model_x=model_x(index1:index2);
    l1=plot(ax6,model_x*factor,original,'Color','red','LineWidth',1.5,'DisplayName','Deconvoluted');
    l2=plot(ax6,model_x*factor,convoluted,'Color','black','LineWidth',1.5,'LineStyle','--','DisplayName','Convoluted');
    logDt2=x(3);
    logDt2_err=(ci(3,2)-ci(3,1))/2;
    if p==7
        lgd=legend(ax6,'Location','northwest');
        legend(ax6,'boxoff')
        if 2*sqrt(10^logDt2)>min_length
            t1=text(ax6,((max(profile_length_original)-min(profile_length_original))*0.05+min(profile_length_original)),(((max(profile)-min(profile))*0.6+min(profile))),sprintf('%s%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(3)))));
        else
            t1=text(ax6,((max(profile_length_original)-min(profile_length_original))*0.05+min(profile_length_original)),(((max(profile)-min(profile))*0.6+min(profile))),sprintf('%s%s\n%s\n%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(3))),'NO RESOLVABLE', 'PROFILE'));
        end
    elseif p==8
        lgd=legend(ax6,'Location','southwest');
        legend(ax6,'boxoff')
        if 2*sqrt(10^logDt2)>min_length
            t1=text(ax6,((max(profile_length_original)-min(profile_length_original))*0.05+min(profile_length_original)),(((max(profile)-min(profile))*0.45+min(profile))),sprintf('%s%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(3)))));
        else
            t1=text(ax6,((max(profile_length_original)-min(profile_length_original))*0.05+min(profile_length_original)),(((max(profile)-min(profile))*0.45+min(profile))),sprintf('%s%s\n%s\n%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',x(3))),'NO RESOLVABLE', 'PROFILE'));
        end
    end
end
lgd.FontUnits='pixels';
lgd.FontSize = 8;
t1.FontUnits='pixels';
t1.FontSize=10;
% put the x limits into the edit boxes
xl=xlim(ax6);
set(handles.edit15,'String',sprintf('%0.1f',xl(1)));
set(handles.edit16,'String',sprintf('%0.1f',xl(2)));
ylim_initial=ylim(ax6);
set(handles.edit17,'String',sprintf('%0.1f',ylim_initial(1)));
set(handles.edit18,'String',sprintf('%0.1f',ylim_initial(2)));
set(handles.togglebutton6,'enable','on'); % enable the settings modification
% exclusion buttons
set(handles.togglebutton8,'enable','off');
set(handles.pushbutton155,'enable','off');
set(handles.togglebutton11,'enable','on');
set(handles.pushbutton156,'enable','on');
set(handles.pushbutton210,'enable','on');
set(handles.pushbutton211,'enable','on');
set(handles.pushbutton212,'enable','on');
set(handles.pushbutton213,'enable','on');
end

% reset deconvolute
function pushbutton213_Callback(hObject, eventdata, handles)
global l1
delete(l1);
global l2
delete(l2);
global t1
delete(t1);
global ax6;
legend(ax6,'off');
set(handles.pushbutton210,'enable','off');
set(handles.pushbutton211,'enable','off');
set(handles.pushbutton212,'enable','off');
set(handles.pushbutton21,'enable','on');
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%----------------------------FITTING FUNCTIONS----------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [convoluted_downsampled,convoluted,original]=f_convolution(model_C1,model_C2,model_x,lgDt,props_matrix,midpoint,profile_length,index1,index2,pmsum)
original=model_C2+(model_C1-model_C2)*0.5*erfc(((model_x-midpoint))/(sqrt(4*10^lgDt)));
convoluted=original.*props_matrix';
convoluted=(sum(convoluted')); %#ok<*UDIM>
convoluted=convoluted.*pmsum;
convoluted=convoluted(((size(convoluted,2)-size(model_x,2))/2)+1:size(convoluted,2)-((size(convoluted,2)-size(model_x,2))/2));
convoluted_downsampled=interp1(model_x,convoluted,profile_length,'nearest');
convoluted=convoluted(index1:index2);
original=original(index1:index2);
end
function [convoluted_downsampled,convoluted,original]=f_convolution_halferf(model_C1,model_C2,model_x,lgDt,props_matrix,profile_length,index1,index2,pmsum)
original=model_C2+(model_C1-model_C2)*erfc(((model_x))/(sqrt(4*10^lgDt)));
convoluted=original.*props_matrix';
convoluted=(sum(convoluted'));
convoluted=convoluted.*pmsum;
convoluted=convoluted(((size(convoluted,2)-size(model_x,2))/2)+1:size(convoluted,2)-((size(convoluted,2)-size(model_x,2))/2));
convoluted_downsampled=interp1(model_x,convoluted,profile_length,'nearest');
convoluted=convoluted(index1:index2);
original=original(index1:index2);
end
function [convoluted_downsampled,convoluted,original]=f_convolution_halferf_backwards(model_C1,model_C2,model_x,lgDt,props_matrix,profile_length,index1,index2,right_edge,pmsum)
original=model_C2+(model_C1-model_C2)*erfc(((right_edge-model_x))/(sqrt(4*10^lgDt)));
convoluted=original.*props_matrix';
convoluted=(sum(convoluted'));
convoluted=convoluted.*pmsum;
convoluted=convoluted(((size(convoluted,2)-size(model_x,2))/2)+1:size(convoluted,2)-((size(convoluted,2)-size(model_x,2))/2));
convoluted_downsampled=interp1(model_x,convoluted,profile_length,'nearest');
convoluted=convoluted(index1:index2);
original=original(index1:index2);
end
function [convoluted_downsampled,convoluted,original]=f_convolution_U(model_C1,model_C2,model_x,lgDt,props_matrix,profile_length,index1,index2,right_edge,pmsum)
original=model_C2+(model_C1-model_C2)*(erfc(((model_x))/(2*sqrt(10^(lgDt))))+erfc((((right_edge-model_x)))/(2*sqrt(10^(lgDt)))));
convoluted=original.*props_matrix';
convoluted=(sum(convoluted'));
convoluted=convoluted.*pmsum;
convoluted=convoluted(((size(convoluted,2)-size(model_x,2))/2)+1:size(convoluted,2)-((size(convoluted,2)-size(model_x,2))/2));
convoluted_downsampled=interp1(model_x,convoluted,profile_length,'nearest');
convoluted=convoluted(index1:index2);
original=original(index1:index2);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%---------------EXTRACT TIME, DIFFUSION COEFFICIENT AND DT----------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Dt
function pushbutton210_Callback(hObject, eventdata, handles)
global logDt2;
global logDt2_err;
global t1;
global ax6;
pos=t1.Position;
% t1.String
if sum(strcmp(t1.String,'NO RESOLVABLE'))==0
  delete (t1)
  t1=text(ax6,pos(1),pos(2),sprintf('%s%s','log_1_0Dt (m^2)=',strcat(sprintf('%0.2f',logDt2))));
  t1.FontUnits='pixels';
    t1.FontSize=10;
end
set(handles.pushbutton21,'enable','off');
end

% D
function pushbutton211_Callback(hObject, eventdata, handles)
global logDt2;
global logDt2_err;
global t1;
global ax6;
prompt={'Time (seconds)'};
dlgtitle='Time input';
dims=[1 35];
definput={''};
logt=log10(str2double(cell2mat(newid(prompt,dlgtitle,dims,definput))));
logD=logDt2-logt;
if isnan(logD)==0
pos=t1.Position;
% t1.String
if sum(strcmp(t1.String,'NO RESOLVABLE'))==0
  delete (t1)
  t1=text(ax6,pos(1),pos(2),sprintf('%s%s','log_1_0D (m^2s^-^1)=',strcat(sprintf('%0.2f',logD))));
  t1.FontUnits='pixels';
t1.FontSize=10;
end
end
set(handles.pushbutton21,'enable','off');
end

% t
function pushbutton212_Callback(hObject, eventdata, handles)
global logDt2;
global logDt2_err;
global t1;
global ax6;
prompt={'logD (m2s-1)'};
dlgtitle='Diffusion coefficient input';
dims=[1 35];
definput={''};
logD=(str2double(cell2mat(newid(prompt,dlgtitle,dims,definput))));
logt=logDt2-logD;
if isnan(logt)==0
pos=t1.Position;
% t1.String
if sum(strcmp(t1.String,'NO RESOLVABLE'))==0
  delete (t1)
  t1=text(ax6,pos(1),pos(2),sprintf('%s%s','log_1_0t (s)=',strcat(sprintf('%0.3f',logt))));
  t1.FontUnits='pixels';
t1.FontSize=10;
end
end
set(handles.pushbutton21,'enable','off');
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%--------------------------MAIN FIG MOD TOGGLE----------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function togglebutton6_Callback(hObject, ~, handles) %#ok<DEFNU>
brush off
h=get(hObject,'Value');
if h==0
    set(handles.togglebutton11,'enable', 'on'); 
    set(handles.pushbutton156,'enable', 'on'); 
    set(handles.pushbutton120,'Visible', 'off'); %points
    set(handles.pushbutton146,'Visible', 'off'); % line 0
    set(handles.pushbutton121,'Visible', 'off'); % line 1
    set(handles.pushbutton122,'Visible', 'off'); % line 2
    set(handles.pushbutton123,'Visible', 'off'); % text
    set(handles.pushbutton124,'Visible', 'off'); % general
    set(handles.pushbutton125,'Visible', 'off'); % export
    set(handles.uipanel6, 'Visible', 'off'); % points
    set(handles.uipanel14, 'Visible', 'off'); % line0
    set(handles.uipanel7, 'Visible', 'off'); % line1
    set(handles.uipanel8, 'Visible', 'off'); % line2
    set(handles.uipanel9, 'Visible', 'off'); % text
    set(handles.uipanel10, 'Visible', 'off'); % general
    set(handles.uipanel11, 'Visible', 'off'); % export
    h=get(handles.figure1,'Position');
    set(handles.figure1,'Position',[h(1) h(2) h(3)-190 h(4)]);
elseif h==1
    %     set(handles.togglebutton6,'FontWeight','bold');
    set(handles.togglebutton11,'enable', 'off'); 
    set(handles.pushbutton156,'enable', 'off'); 
    set(handles.pushbutton120,'Visible', 'on','FontWeight','normal'); %points
    set(handles.pushbutton146,'Visible', 'on','FontWeight','normal'); % line 0
    set(handles.pushbutton121,'Visible', 'on','FontWeight','normal'); % line 1
    set(handles.pushbutton122,'Visible', 'on','FontWeight','normal'); % line 2
    set(handles.pushbutton123,'Visible', 'on','FontWeight','normal'); % text
    set(handles.pushbutton124,'Visible', 'on','FontWeight','normal'); % general
    set(handles.pushbutton125,'Visible', 'on','FontWeight','normal'); % export
    h=get(handles.figure1,'Position');
    set(handles.figure1,'Position',[h(1) h(2) h(3)+190 h(4)]);
end
end

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ------------ ALL OPTIONS RELATING TO THE SCATTER POINTS --------------- %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% point modification toggle
function pushbutton120_Callback(~, ~, handles) %#ok<DEFNU>
p1=getpixelposition(handles.pushbutton120);
p2=getpixelposition(handles.uipanel6);
setpixelposition(handles.uipanel6,[p1(1)+p1(3)-1 p1(2)+p1(4)-p2(4) p2(3) p2(4)]);
set(handles.pushbutton120,'FontWeight','bold'); %points
set(handles.pushbutton146,'FontWeight','normal'); % line 0
set(handles.pushbutton121,'FontWeight','normal'); % line 1
set(handles.pushbutton122,'FontWeight','normal'); % line 2
set(handles.pushbutton123,'FontWeight','normal'); % text
set(handles.pushbutton124,'FontWeight','normal'); % general
set(handles.pushbutton125,'FontWeight','normal'); % export
set(handles.uipanel6, 'Visible', 'on'); % points
set(handles.uipanel14, 'Visible', 'off'); % line0
set(handles.uipanel7, 'Visible', 'off'); % line1
set(handles.uipanel8, 'Visible', 'off'); % line2
set(handles.uipanel9, 'Visible', 'off'); % text
set(handles.uipanel10, 'Visible', 'off'); % general
set(handles.uipanel11, 'Visible', 'off'); % export
set(handles.uipanel16, 'Visible', 'off'); % points fill color wheel
set(handles.togglebutton12,'Value',0); % points fill colorwheel toggle off default
set(handles.togglebutton13,'Value',0); % points line colorwheel toggle off default
global s % get the point details, only if the points exist
if exist('s','var')==1
    h=get(s,'LineWidth');
    set(handles.slider2,'Value',h/5);
    set(handles.edit19,'String',num2str(round(h*20)/20));
    h=get(s,'MarkerEdgeAlpha');
    if h==0
        set(handles.slider2,'Value',0);
        set(handles.edit19,'String',num2str(h));
    end
    h=get(s,'SizeData');
    set(handles.slider1,'Value',(h-1)/199);
    set(handles.edit20,'String',num2str(round(h)));
    h=get(s,'MarkerFaceAlpha');
    set(handles.slider7,'Value',h);
    set(handles.edit21,'String',num2str(round(h*100)/100));
end
end
%% point shapes
function pushbutton79_Callback(~, ~, ~) %#ok<DEFNU>
global se
se.Marker = 'v'; % downwards triangle
global s
s.Marker = 'v'; % downwards triangle
end
function pushbutton80_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.Marker = '^'; % up triangle
global se
se.Marker = '^'; % up triangle
end
function pushbutton81_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.Marker = '<'; % left triangle
global se
se.Marker = '<'; % left triangle
end
function pushbutton82_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.Marker = '>'; % right triangle
global se
se.Marker = '>'; % right triangle
end
function pushbutton83_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.Marker = 'o'; % circle
global se
se.Marker = 'o'; % circle
end
function pushbutton84_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.Marker = 's'; % star
end
function pushbutton85_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.Marker = 'd'; % diamond
global se
se.Marker = 'd'; % diamond
end
function pushbutton86_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.Marker = 'p'; %pentagram
global se
se.Marker = 'p'; %pentagram
end
%% fill colours
function pushbutton50_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.MarkerFaceColor = 'red';
global se
se.MarkerFaceColor = 'red';
end
function pushbutton51_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.MarkerFaceColor = 'magenta';
global se
se.MarkerFaceColor = 'magenta';
end
function pushbutton52_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.MarkerFaceColor = 'yellow';
global se
se.MarkerFaceColor = 'yellow';
end
function pushbutton53_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.MarkerFaceColor = 'green';
global se
se.MarkerFaceColor = 'green';
end
function pushbutton54_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.MarkerFaceColor = 'cyan';
global se
se.MarkerFaceColor = 'cyan';
end
function pushbutton55_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.MarkerFaceColor = 'blue';
global se
se.MarkerFaceColor = 'blue';
end
function pushbutton59_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.MarkerFaceColor = [0 0 0]; % black
global se
se.MarkerFaceColor = [0 0 0]; % black
end
function pushbutton60_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.MarkerFaceColor = [0.5 0.5 0.5]; % grey
global se
se.MarkerFaceColor = [0.5 0.5 0.5]; % grey
end
function pushbutton61_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.MarkerFaceColor = [1 1 1]; % white
global se
se.MarkerFaceColor = [1 1 1]; % white
end
%% linewidth slider
function slider2_Callback(hObject, ~, handles) %#ok<DEFNU>
h=get(hObject,'Value'); % return contents of slider as number
set(handles.edit19,'String',num2str(round((h*100))/20)); % set the contents of the edit box as the slider value
global s % call in the scatter plot
global se
if h==0
    s.MarkerEdgeAlpha = 0; % if slider is all the way to left, no line
    se.MarkerEdgeAlpha = 0; % if slider is all the way to left, no line
elseif h>0
    s.MarkerEdgeAlpha = 1; % if slider has any value not zero, full opacity
    s.LineWidth = h*5; % value between zero and five
    se.MarkerEdgeAlpha = s.MarkerEdgeAlpha/4; % if slider has any value not zero, full opacity
    se.LineWidth = h*5; % value between zero and five    
end
end
function slider2_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end
end
%% point linewidth edit box
function edit19_Callback(hObject, ~, handles) %#ok<DEFNU>
h=str2double(get(hObject,'String')); %returns contents of edit19 as num
global s % call in the scatter points
global se
if h>5
    h=5; % five is the max value
    set(hObject,'String',num2str(h)); % set edit box to five
end
if h==0 % if value set to zero, no line
    s.MarkerEdgeAlpha = 0;
        se.MarkerEdgeAlpha = 0;
elseif h>0 % if value set to anything, line has full opacity
    s.MarkerEdgeAlpha = 1;
    se.MarkerEdgeAlpha = s.MarkerEdgeAlpha/4;
%     s.MarkerEdgeColor = 'black'; % black is only colour available
    s.LineWidth = h*5;
    se.LineWidth = h*5;
end
set(handles.slider2,'Value',h/5); % set slider to correspond to edit value
end
function edit19_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end
%% point size slider
function slider1_Callback(hObject, ~, handles) %#ok<DEFNU>
h=get(hObject,'Value');
set(handles.edit20,'String',num2str(round(h*199+1))); % set the contents of the edit box as the slider value
global s
global se
s.SizeData = h*199+1;
se.SizeData = h*199+1;
end
function slider1_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end
end
%% point size edit box
function edit20_Callback(hObject, ~, handles) %#ok<DEFNU>
h=str2double(get(hObject,'String')); %returns contents of edit20 as num
global s
global se
s.SizeData = h; % set the size of the points
se.SizeData = h; % set the size of the points
set(handles.slider1,'Value',(h-1)/199); % set slider to correspond to edit value
end
function edit20_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end
%% toggle color wheel for the point fills
function togglebutton12_Callback(hObject, ~, handles) %#ok<DEFNU>
p1=getpixelposition(handles.uipanel6); % points panel position
p2=getpixelposition(handles.uipanel16); % colorwheel panel position
set(handles.togglebutton13,'Value',0);
global s
global se
h=get(hObject,'Value');
global colorwheel_selector
colorwheel_selector=1; % means the wheel is setting the fills
if h==1
    set(handles.uipanel16, 'Visible', 'on'); % color wheel
    setpixelposition(handles.uipanel16,[p1(1) p1(2)-p2(4)+2 p1(3) p2(4)]);
    axes(handles.axes8);
    cla
    ax8=handles.axes8;
    set(gca,'YTickLabel',[]);
    set(gca,'XTickLabel',[]);
    set(gca,'XTick',[]);
    set(gca,'YTick',[]);
    box on
    axes(handles.axes7);
    cla
    ax7=handles.axes7;
    h=hsv(64);
    hsv_interp = [interp1((1:64)',h(:,1),1:0.3:64); interp1((1:64)',h(:,2),(1:0.3:64)); interp1((1:64)',h(:,3),(1:0.3:64))]';
    imagesc(ax7,(1:size(hsv_interp,1))); colormap(ax7,hsv_interp);
    set(gca,'YTickLabel',[]);
    set(gca,'XTickLabel',[]);
    set(gca,'XTick',[]);
    set(gca,'YTick',[]);
    x=ginput(1);
    x=round(x(1));
    if x<1
        x=1;
    end
    if x>size(hsv_interp,1)
        x=size(hsv_interp,1);
    end
    selected_color=hsv_interp(x,:);
    col2_interp = [interp1([1 size(hsv_interp,1)/2 size(hsv_interp,1)]',[0 selected_color(1) 1],(1:size(hsv_interp,1))') interp1([1 size(hsv_interp,1)/2 size(hsv_interp,1)]',[0 selected_color(2) 1],(1:size(hsv_interp,1))') interp1([1 size(hsv_interp,1)/2 size(hsv_interp,1)]',[0 selected_color(3) 1],(1:size(hsv_interp,1))')];
    axes(handles.axes8);
    imagesc(ax8,(1:size(hsv_interp,1))); colormap (ax8,col2_interp);
    set(gca,'YTickLabel',[]);
    set(gca,'XTickLabel',[]);
    set(gca,'XTick',[]);
    set(gca,'YTick',[]);
    x=ginput(1);
    x=round(x(1));
    if x<1
        x=1;
    end
    if x>size(hsv_interp,1)
        x=size(hsv_interp,1);
    end
    selected_color=col2_interp(x,:);
    if exist('s','var')==1
        s.MarkerFaceColor=selected_color;
        se.MarkerFaceColor=selected_color;
    end
elseif h==0
    set(handles.uipanel16, 'Visible', 'off'); % color wheel
end
end
%% reset the first colorbar
function pushbutton159_Callback(~, ~, handles) %#ok<DEFNU>
global colorwheel_selector
set(handles.uipanel16, 'Visible', 'on'); % color wheel
axes(handles.axes8);
cla
ax8=handles.axes8;
set(gca,'YTickLabel',[]);
set(gca,'XTickLabel',[]);
set(gca,'XTick',[]);
set(gca,'YTick',[]);
box on
axes(handles.axes7);
cla
ax7=handles.axes7;
h=hsv(64);
hsv_interp = [interp1((1:64)',h(:,1),(1:0.3:64)); interp1((1:64)',h(:,2),(1:0.3:64)); interp1((1:64)',h(:,3),(1:0.3:64))]';
imagesc(ax7,(1:size(hsv_interp,1))); colormap(ax7,hsv_interp);
set(gca,'YTickLabel',[]);
set(gca,'XTickLabel',[]);
set(gca,'XTick',[]);
set(gca,'YTick',[]);
x=ginput(1);
x=round(x(1));
if x<1
    x=1;
end
if x>size(hsv_interp,1)
    x=size(hsv_interp,1);
end
selected_color=hsv_interp(x,:);
col2_interp = [interp1([1 size(hsv_interp,1)/2 size(hsv_interp,1)]',[0 selected_color(1) 1],(1:size(hsv_interp,1))') interp1([1 size(hsv_interp,1)/2 size(hsv_interp,1)]',[0 selected_color(2) 1],(1:size(hsv_interp,1))') interp1([1 size(hsv_interp,1)/2 size(hsv_interp,1)]',[0 selected_color(3) 1],(1:size(hsv_interp,1))')];
axes(handles.axes8);
imagesc(ax8,(1:size(hsv_interp,1))); colormap (ax8,col2_interp);
set(gca,'YTickLabel',[]);
set(gca,'XTickLabel',[]);
set(gca,'XTick',[]);
set(gca,'YTick',[]);
x=ginput(1);
x=round(x(1));
if x<1
    x=1;
end
if x>size(hsv_interp,1)
    x=size(hsv_interp,1);
end
selected_color=col2_interp(x,:);
global s
global se
global l1
global l2
global l0_2
if colorwheel_selector==1
    if exist('s','var')==1
        s.MarkerFaceColor=selected_color;
        se.MarkerFaceColor=selected_color;
    end
elseif colorwheel_selector==2
    if exist('s','var')==1
        s.MarkerEdgeColor=selected_color;
        se.MarkerEdgeColor=selected_color;
    end
elseif colorwheel_selector==3
    if exist('l1','var')==1
        l1.Color=selected_color;
    end
elseif colorwheel_selector==4
    if exist('l2','var')==1
        l2.Color=selected_color;
    end
elseif colorwheel_selector==5
    if exist('l0_2','var')==1
        l0_2.Color=selected_color;
    end
end
end

%% reset the second colorbar
function pushbutton160_Callback(~, ~, handles) %#ok<DEFNU>
global colorwheel_selector
axes(handles.axes8);
ax8=handles.axes8;
col2_interp=colormap(ax8);
imagesc(ax8,(1:size(col2_interp,1))); colormap (ax8,col2_interp);
set(gca,'YTickLabel',[]);
set(gca,'XTickLabel',[]);
set(gca,'XTick',[]);
set(gca,'YTick',[]);
x=ginput(1);
x=round(x(1));
if x<1
    x=1;
end
if x>size(col2_interp,1)
    x=size(col2_interp,1);
end
selected_color=col2_interp(x,:);
global s
global se
global l1
global l2
global l0_2
if colorwheel_selector==1
    if exist('s','var')==1
        s.MarkerFaceColor=selected_color;
        se.MarkerFaceColor=selected_color;
    end
elseif colorwheel_selector==2
    if exist('s','var')==1
        s.MarkerEdgeColor=selected_color;
        se.MarkerFaceColor=selected_color;
    end
elseif colorwheel_selector==3
    if exist('l1','var')==1
        l1.Color=selected_color;
    end
elseif colorwheel_selector==4
    if exist('l2','var')==1
        l2.Color=selected_color;
    end
elseif colorwheel_selector==5
    if exist('l0_2','var')==1
        l0_2.Color=selected_color;
    end
end
end
%% opacity slider
function slider7_Callback(hObject, ~, handles)  %#ok<DEFNU>
h=get(hObject,'Value');
set(handles.edit21,'String',num2str(round(h*100)/100)); % set the contents of the edit box as the slider value
global s
global se
if exist('s','var')==1
    s.MarkerFaceAlpha =h;
    se.MarkerFaceAlpha =s.MarkerFaceAlpha/4;
end
end
function slider7_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end
end
%% opacity edit box
function edit21_Callback(hObject, ~, ~)  %#ok<DEFNU>
h=str2double(get(hObject,'String')); %returns contents of edit21 as num
global s
global se
if h<0
    h=0;
end
if h>1
    h=1;
end
if exist('s','var')==1
    s.MarkerFaceAlpha =h;
    se.MarkerFaceAlpha =s.MarkerFaceAlpha/4;
    set(handles.slider1,'Value',h); % set slider to correspond to edit value
end
end
function edit21_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end
%% line colour
function pushbutton164_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.MarkerEdgeColor = 'red';
global se
se.MarkerEdgeColor = 'red';
end
function pushbutton165_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.MarkerEdgeColor = 'magenta';
global se
se.MarkerEdgeColor = 'magenta';
end
function pushbutton166_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.MarkerEdgeColor = 'green';
global se
se.MarkerEdgeColor = 'green';
end
function pushbutton167_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.MarkerEdgeColor = 'cyan';
global se
se.MarkerEdgeColor = 'cyan';
end
function pushbutton168_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.MarkerEdgeColor = 'blue';
global se
se.MarkerEdgeColor = 'blue';
end
function pushbutton169_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.MarkerEdgeColor = [0 0 0]; % black
global se
se.MarkerEdgeColor = [0 0 0]; % black
end
function pushbutton170_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.MarkerEdgeColor = 'yellow';
global se
se.MarkerEdgeColor = 'yellow';
end
function pushbutton171_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.MarkerEdgeColor = [0.5 0.5 0.5]; % grey
global se
se.MarkerEdgeColor = [0.5 0.5 0.5]; % grey
end
function pushbutton172_Callback(~, ~, ~) %#ok<DEFNU>
global s
s.MarkerEdgeColor = [1 1 1]; % white
global se
se.MarkerEdgeColor = [1 1 1]; % white
end
%% colour wheel toggle lines
function togglebutton13_Callback(hObject, ~, handles) %#ok<DEFNU>
p1=getpixelposition(handles.uipanel6); % points panel position
p2=getpixelposition(handles.uipanel16); % colorwheel panel position
set(handles.togglebutton12,'Value',0);
global s
global se
h=get(hObject,'Value');
global colorwheel_selector
colorwheel_selector=2; % means the wheel is setting the fills
if h==1
    set(handles.uipanel16, 'Visible', 'on'); % color wheel
    setpixelposition(handles.uipanel16,[p1(1) p1(2)-p2(4)+2 p1(3) p2(4)]);
    axes(handles.axes8);
    cla
    ax8=handles.axes8;
    set(gca,'YTickLabel',[]);
    set(gca,'XTickLabel',[]);
    set(gca,'XTick',[]);
    set(gca,'YTick',[]);
    box on
    axes(handles.axes7);
    cla
    ax7=handles.axes7;
    h=hsv(64);
    hsv_interp = [interp1((1:64)',h(:,1),1:0.3:64); interp1((1:64)',h(:,2),(1:0.3:64)); interp1((1:64)',h(:,3),(1:0.3:64))]';
    imagesc(ax7,(1:size(hsv_interp,1))); colormap(ax7,hsv_interp);
    set(gca,'YTickLabel',[]);
    set(gca,'XTickLabel',[]);
    set(gca,'XTick',[]);
    set(gca,'YTick',[]);
    x=ginput(1);
    x=round(x(1));
    if x<1
        x=1;
    end
    if x>size(hsv_interp,1)
        x=size(hsv_interp,1);
    end
    selected_color=hsv_interp(x,:);
    col2_interp = [interp1([1 size(hsv_interp,1)/2 size(hsv_interp,1)]',[0 selected_color(1) 1],(1:size(hsv_interp,1))') interp1([1 size(hsv_interp,1)/2 size(hsv_interp,1)]',[0 selected_color(2) 1],(1:size(hsv_interp,1))') interp1([1 size(hsv_interp,1)/2 size(hsv_interp,1)]',[0 selected_color(3) 1],(1:size(hsv_interp,1))')];
    axes(handles.axes8);
    imagesc(ax8,(1:size(hsv_interp,1))); colormap (ax8,col2_interp);
    set(gca,'YTickLabel',[]);
    set(gca,'XTickLabel',[]);
    set(gca,'XTick',[]);
    set(gca,'YTick',[]);
    x=ginput(1);
    x=round(x(1));
    if x<1
        x=1;
    end
    if x>size(hsv_interp,1)
        x=size(hsv_interp,1);
    end
    selected_color=col2_interp(x,:);
    if exist('s','var')==1
        s.MarkerEdgeColor=selected_color;
        se.MarkerEdgeColor=selected_color;
    end
elseif h==0
    set(handles.uipanel16, 'Visible', 'off'); % color wheel
end
end

%% Line 0
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ----------------- ALL OPTIONS RELATING TO FIT 0  ---------------------- %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ---------------------------- ORIGINAL --------------------------------- %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%line 0 mod (original fit)
function pushbutton146_Callback(~, ~, handles) %#ok<DEFNU>
p1=getpixelposition(handles.pushbutton146);
p2=getpixelposition(handles.uipanel14);
setpixelposition(handles.uipanel14,[p1(1)+p1(3)-1 p1(2)+p1(4)-p2(4) p2(3) p2(4)]);
set(handles.pushbutton120,'FontWeight','normal'); %points
set(handles.pushbutton146,'FontWeight','bold'); % line 0
set(handles.pushbutton121,'FontWeight','normal'); % line 1
set(handles.pushbutton122,'FontWeight','normal'); % line 2
set(handles.pushbutton123,'FontWeight','normal'); % text
set(handles.pushbutton124,'FontWeight','normal'); % general
set(handles.pushbutton125,'FontWeight','normal'); % export
set(handles.uipanel6, 'Visible', 'off'); % points
set(handles.uipanel14, 'Visible', 'on'); % line0
set(handles.uipanel7, 'Visible', 'off'); % line1
set(handles.uipanel8, 'Visible', 'off'); % line2
set(handles.uipanel9, 'Visible', 'off'); % text
set(handles.uipanel10, 'Visible', 'off'); % general
set(handles.uipanel11, 'Visible', 'off'); % export
set(handles.uipanel16, 'Visible', 'off'); % colorwheel
global l0_2;
global l02_exist
global s
global l1
global l2
if isempty(l02_exist)==1
    set(handles.checkbox11,'Value',0,'String','Off'); % visible on off
end
if l02_exist==1
    if strcmp(l0_2.LineStyle,'none')==1
        set(handles.checkbox11,'Value',0,'String','Off'); % visible on off
    else
        set(handles.checkbox11,'Value',1,'String','On'); % visible on off
    end
    set(handles.slider8,'Value',l0_2.LineWidth/5);
    set(handles.edit24,'String',round(l0_2.LineWidth*100)/100);
    set(handles.slider8,'Value',l0_2.LineWidth/5);
    set(handles.edit24,'String',round(l0_2.LineWidth*100)/100);
end

end
% visible on/off line 0
function checkbox11_Callback(hObject, ~, ~) %#ok<DEFNU>
h=get(hObject,'Value');
global ax6
global l0;
x = l0.XData;
y = l0.YData;
global l0_2; % l0 in plot 2;
global l02_exist
if isempty(l02_exist)==1
    l0_2=plot(ax6,x,y,'Color','blue','LineWidth',1.5,'LineStyle','none','DisplayName','Original','Visible','Off');
end
l02_exist=1;
global lss0;
if lss0==4
    ls='-.';
elseif lss0==3
    ls=':';
elseif lss0==2
    ls='--';
else
    ls='-';
end
if h==1
    set(hObject,'String','On');
    l0_2.Visible='On';
    l0_2.LineStyle=ls;
end
if h==0
    set(hObject,'String','Off');
    l0_2.Visible='Off';
    l0_2.LineStyle='none';
end
end
%% line 0 colors
function pushbutton174_Callback(~, ~, ~) %#ok<DEFNU>
global l0_2
l0_2.Color = 'red';
end
function pushbutton175_Callback(~, ~, ~) %#ok<DEFNU>
global l0_2
l0_2.Color = 'magenta';
end
function pushbutton176_Callback(~, ~, ~) %#ok<DEFNU>
global l0_2
l0_2.Color = 'green';
end
function pushbutton177_Callback(~, ~, ~) %#ok<DEFNU>
global l0_2
l0_2.Color = 'cyan';
end
function pushbutton178_Callback(~, ~, ~) %#ok<DEFNU>
global l0_2
l0_2.Color = 'blue';
end
function pushbutton179_Callback(~, ~, ~) %#ok<DEFNU>
global l0_2
l0_2.Color = [0 0 0];
end
function pushbutton180_Callback(~, ~, ~) %#ok<DEFNU>
global l0_2
l0_2.Color = 'yellow';
end
function pushbutton181_Callback(~, ~, ~) %#ok<DEFNU>
global l0_2
l0_2.Color = [0.5 0.5 0.5];
end
function pushbutton182_Callback(~, ~, ~) %#ok<DEFNU>
global l0_2
l0_2.Color = [1 1 1];
end

% colorwheel line 0
function togglebutton16_Callback(hObject, ~, handles) %#ok<DEFNU>
p1=getpixelposition(handles.uipanel14); % points panel position
p2=getpixelposition(handles.uipanel16); % colorwheel panel position
global l0_2
h=get(hObject,'Value');
global colorwheel_selector
colorwheel_selector=5; % means the wheel is setting line 0 color
if h==1
    set(handles.uipanel16, 'Visible', 'on'); % color wheel
    setpixelposition(handles.uipanel16,[p1(1) p1(2)-p2(4)+2 p1(3) p2(4)]);
    axes(handles.axes8);
    cla
    ax8=handles.axes8;
    set(gca,'YTickLabel',[]);
    set(gca,'XTickLabel',[]);
    set(gca,'XTick',[]);
    set(gca,'YTick',[]);
    box on
    axes(handles.axes7);
    cla
    ax7=handles.axes7;
    h=hsv(64);
    hsv_interp = [interp1((1:64)',h(:,1),1:0.3:64); interp1((1:64)',h(:,2),(1:0.3:64)); interp1((1:64)',h(:,3),(1:0.3:64))]';
    imagesc(ax7,(1:size(hsv_interp,1))); colormap(ax7,hsv_interp);
    set(gca,'YTickLabel',[]);
    set(gca,'XTickLabel',[]);
    set(gca,'XTick',[]);
    set(gca,'YTick',[]);
    x=ginput(1);
    x=round(x(1));
    if x<1
        x=1;
    end
    if x>size(hsv_interp,1)
        x=size(hsv_interp,1);
    end
    selected_color=hsv_interp(x,:);
    col2_interp = [interp1([1 size(hsv_interp,1)/2 size(hsv_interp,1)]',[0 selected_color(1) 1],(1:size(hsv_interp,1))') interp1([1 size(hsv_interp,1)/2 size(hsv_interp,1)]',[0 selected_color(2) 1],(1:size(hsv_interp,1))') interp1([1 size(hsv_interp,1)/2 size(hsv_interp,1)]',[0 selected_color(3) 1],(1:size(hsv_interp,1))')];
    axes(handles.axes8);
    imagesc(ax8,(1:size(hsv_interp,1))); colormap (ax8,col2_interp);
    set(gca,'YTickLabel',[]);
    set(gca,'XTickLabel',[]);
    set(gca,'XTick',[]);
    set(gca,'YTick',[]);
    x=ginput(1);
    x=round(x(1));
    if x<1
        x=1;
    end
    if x>size(hsv_interp,1)
        x=size(hsv_interp,1);
    end
    selected_color=col2_interp(x,:);
    if exist('l0_2','var')==1
        l0_2.Color=selected_color;
    end
elseif h==0
    set(handles.uipanel16, 'Visible', 'off'); % color wheel
end
end
% slider line 0
function slider8_Callback(hObject,~, handles)%#ok<DEFNU>
h=get(hObject,'Value');
h=round(h*100)/20;
if h==0
    h=0.05;
end
set(handles.edit24,'String',num2str(h)); % set the contents of the edit box as the slider value
global l0_2
l0_2.LineWidth = h;
end
function slider8_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end
end

% edit width line 0
function edit24_Callback(hObject, ~, handles) %#ok<DEFNU>
h=str2double(get(hObject,'String')); %returns contents of edit24 as num
if h<0.05
    h=0.05;
    set(hObject,'String',num2str(h));
end
if h>5
    h=5;
    set(hObject,'String',num2str(h));
end
global l0_2
l0_2.LineWidth = h; % set the linewidth
set(handles.slider8,'Value',(h/5)); % set slider to correspond to edit value
end
function edit24_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end

%% line styles line 0
function pushbutton183_Callback(~, ~, handles) %#ok<DEFNU>
global l0_2
l0_2.LineStyle = '-';
global lss0
lss0=1;
set(handles.checkbox11,'String','On');
end
function pushbutton184_Callback(~, ~, handles) %#ok<DEFNU>
global l0_2
l0_2.LineStyle = '--';
global lss0
lss0=2;
set(handles.checkbox11,'String','On');
end
function pushbutton185_Callback(~, ~, handles) %#ok<DEFNU>
global l0_2
l0_2.LineStyle = ':';
global lss0
lss0=3;
set(handles.checkbox11,'String','On');
end
function pushbutton186_Callback(~, ~, handles) %#ok<DEFNU>
global l0_2
l0_2.LineStyle = '-.';
global lss0
lss0=4;
set(handles.checkbox11,'String','On');
end
%% order line 0
function pushbutton187_Callback(~, ~, ~) %#ok<DEFNU>
global l0_2
uistack(l0_2,'up',1);
end
function pushbutton188_Callback(~, ~, ~) %#ok<DEFNU>
global l0_2
uistack(l0_2,'down',1);
end

%% Fit 1
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ----------------- ALL OPTIONS RELATING TO FIT 1  ---------------------- %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% -------------------------- DECONVOLUTED ------------------------------- %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% toggle the figure mod panel on and off
function pushbutton121_Callback(~, ~, handles) %#ok<DEFNU>
p1=getpixelposition(handles.pushbutton121);
p2=getpixelposition(handles.uipanel7);
setpixelposition(handles.uipanel7,[p1(1)+p1(3)-1 p1(2)+p1(4)-p2(4) p2(3) p2(4)]);
set(handles.pushbutton120,'FontWeight','normal'); %points
set(handles.pushbutton146,'FontWeight','normal'); % line 0
set(handles.pushbutton121,'FontWeight','bold'); % line 1
set(handles.pushbutton122,'FontWeight','normal'); % line 2
set(handles.pushbutton123,'FontWeight','normal'); % text
set(handles.pushbutton124,'FontWeight','normal'); % general
set(handles.pushbutton125,'FontWeight','normal'); % export
set(handles.uipanel6, 'Visible', 'off'); % points
set(handles.uipanel14, 'Visible', 'off'); % line0
set(handles.uipanel7, 'Visible', 'on'); % line1
set(handles.uipanel8, 'Visible', 'off'); % line2
set(handles.uipanel9, 'Visible', 'off'); % text
set(handles.uipanel10, 'Visible', 'off'); % general
set(handles.uipanel11, 'Visible', 'off'); % export
set(handles.uipanel16, 'Visible', 'off'); % color wheel
global l1;
if exist('l1','var')==1
    if isempty(l1)==0
        if strcmp(l1.LineStyle,'none')==1
            set(handles.checkbox9,'Value',0,'String','Off'); % visible on off
        else
            set(handles.checkbox9,'Value',1,'String','On'); % visible on off
        end
        set(handles.slider3,'Value',l1.LineWidth/5);
        set(handles.edit22,'String',round(l1.LineWidth*100)/100);
    end
end
end
function checkbox9_Callback(hObject, ~, ~) %#ok<DEFNU>
h=get(hObject,'Value');
global l1;
global lss;
if lss==4
    ls='-.';
elseif lss==3
    ls=':';
elseif lss==2
    ls='--';
else
    ls='-';
end
if h==0
    set(hObject,'String','Off');
    l1.Visible='Off';
    l1.LineStyle='none';
end
if h==1
    set(hObject,'String','On');
    l1.Visible='On';
    l1.LineStyle=ls;
end
end
%% line 1 color
function pushbutton62_Callback(~, ~, ~) %#ok<DEFNU>
global l1
l1.Color = 'red';
end
function pushbutton63_Callback(~, ~, ~) %#ok<DEFNU>
global l1
l1.Color = 'magenta';
end
function pushbutton71_Callback(~, ~, ~) %#ok<DEFNU>
global l1
l1.Color = 'yellow';
end
function pushbutton64_Callback(~, ~, ~) %#ok<DEFNU>
global l1
l1.Color = 'green';
end
function pushbutton65_Callback(~, ~, ~) %#ok<DEFNU>
global l1
l1.Color = 'cyan';
end
function pushbutton66_Callback(~, ~, ~) %#ok<DEFNU>
global l1
l1.Color = 'blue';
end
function pushbutton70_Callback(~, ~, ~) %#ok<DEFNU>
global l1
l1.Color = [0 0 0];
end
function pushbutton72_Callback(~, ~, ~) %#ok<DEFNU>
global l1
l1.Color = [0.5 0.5 0.5];
end
function pushbutton73_Callback(~, ~, ~) %#ok<DEFNU>
global l1
l1.Color = [1 1 1];
end
%% colorwheel toggle line 1
function togglebutton14_Callback(hObject, ~, handles) %#ok<DEFNU>
p1=getpixelposition(handles.uipanel7); % points panel position
p2=getpixelposition(handles.uipanel16); % colorwheel panel position
% set(handles.togglebutton14,'Value',0);
global l1
h=get(hObject,'Value');
global colorwheel_selector
colorwheel_selector=3; % means the wheel is setting line 1 color
if h==1
    set(handles.uipanel16, 'Visible', 'on'); % color wheel
    setpixelposition(handles.uipanel16,[p1(1) p1(2)-p2(4)+2 p1(3) p2(4)]);
    axes(handles.axes8);
    cla
    ax8=handles.axes8;
    set(gca,'YTickLabel',[]);
    set(gca,'XTickLabel',[]);
    set(gca,'XTick',[]);
    set(gca,'YTick',[]);
    box on
    axes(handles.axes7);
    cla
    ax7=handles.axes7;
    h=hsv(64);
    hsv_interp = [interp1((1:64)',h(:,1),1:0.3:64); interp1((1:64)',h(:,2),(1:0.3:64)); interp1((1:64)',h(:,3),(1:0.3:64))]';
    imagesc(ax7,(1:size(hsv_interp,1))); colormap(ax7,hsv_interp);
    set(gca,'YTickLabel',[]);
    set(gca,'XTickLabel',[]);
    set(gca,'XTick',[]);
    set(gca,'YTick',[]);
    x=ginput(1);
    x=round(x(1));
    if x<1
        x=1;
    end
    if x>size(hsv_interp,1)
        x=size(hsv_interp,1);
    end
    selected_color=hsv_interp(x,:);
    col2_interp = [interp1([1 size(hsv_interp,1)/2 size(hsv_interp,1)]',[0 selected_color(1) 1],(1:size(hsv_interp,1))') interp1([1 size(hsv_interp,1)/2 size(hsv_interp,1)]',[0 selected_color(2) 1],(1:size(hsv_interp,1))') interp1([1 size(hsv_interp,1)/2 size(hsv_interp,1)]',[0 selected_color(3) 1],(1:size(hsv_interp,1))')];
    axes(handles.axes8);
    imagesc(ax8,(1:size(hsv_interp,1))); colormap (ax8,col2_interp);
    set(gca,'YTickLabel',[]);
    set(gca,'XTickLabel',[]);
    set(gca,'XTick',[]);
    set(gca,'YTick',[]);
    x=ginput(1);
    x=round(x(1));
    if x<1
        x=1;
    end
    if x>size(hsv_interp,1)
        x=size(hsv_interp,1);
    end
    selected_color=col2_interp(x,:);
    if exist('l1','var')==1
        l1.Color=selected_color;
    end
elseif h==0
    set(handles.uipanel16, 'Visible', 'off'); % color wheel
end
end

%% slider linewidth1
function slider3_Callback(hObject, ~, handles) %#ok<DEFNU>
h=get(hObject,'Value');
h=round(h*100)/20;
if h==0
    h=0.05;
end
set(handles.edit22,'String',num2str(h)); % set the contents of the edit box as the slider value
global l1
l1.LineWidth = h;
end
function slider3_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end
end
% line 1 width editor
function edit22_Callback(hObject, ~, handles) %#ok<DEFNU>
h=str2double(get(hObject,'String')); %returns contents of edit22 as num
if h<0.05
    h=0.05;
    set(hObject,'String',num2str(h));
end
if h>5
    h=5;
    set(hObject,'String',num2str(h));
end
global l1
l1.LineWidth = h; % set the linewidth
set(handles.slider3,'Value',(h/5)); % set slider to correspond to edit value
end
function edit22_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end
%% linestyles1
function pushbutton74_Callback(~, ~, handles) %#ok<DEFNU>
global l1
l1.LineStyle = '-';
global lss
lss=1;
set(handles.checkbox9,'String','On');
end
function pushbutton76_Callback(~, ~, handles) %#ok<DEFNU>
global l1
l1.LineStyle = '--';
global lss
lss=2;
set(handles.checkbox9,'String','On');
end
function pushbutton77_Callback(~, ~, handles) %#ok<DEFNU>
global l1
l1.LineStyle = ':';
global lss
lss=3;
set(handles.checkbox9,'String','On');
end
function pushbutton78_Callback(~, ~, handles) %#ok<DEFNU>
global l1
l1.LineStyle = '-.';
global lss
lss=4;
set(handles.checkbox9,'String','On');
end
%% line 1 order
function pushbutton189_Callback(~, ~, ~) %#ok<DEFNU>
global l1
uistack(l1,'up',1);
end
function pushbutton190_Callback(~, ~, ~) %#ok<DEFNU>
global l1
uistack(l1,'down',1);
end

%% Fit 2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ----------------- ALL OPTIONS RELATING TO FIT 2  ---------------------- %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ------------------------- DECONVOLUTED -------------------------------- %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% main line 2 mod
function pushbutton122_Callback(~, ~, handles) %#ok<DEFNU>
p1=getpixelposition(handles.pushbutton122);
p2=getpixelposition(handles.uipanel8);
setpixelposition(handles.uipanel8,[p1(1)+p1(3)-1 p1(2)+p1(4)-p2(4) p2(3) p2(4)]);
set(handles.pushbutton120,'FontWeight','normal'); %points
set(handles.pushbutton146,'FontWeight','normal'); % line 0
set(handles.pushbutton121,'FontWeight','normal'); % line 1
set(handles.pushbutton122,'FontWeight','bold'); % line 2
set(handles.pushbutton123,'FontWeight','normal'); % text
set(handles.pushbutton124,'FontWeight','normal'); % general
set(handles.pushbutton125,'FontWeight','normal'); % export
set(handles.uipanel16, 'Visible', 'off'); % color wheel
set(handles.uipanel6, 'Visible', 'off'); % points
set(handles.uipanel14, 'Visible', 'off'); % line0
set(handles.uipanel7, 'Visible', 'off'); % line1
set(handles.uipanel8, 'Visible', 'on'); % line2
set(handles.uipanel9, 'Visible', 'off'); % text
set(handles.uipanel10, 'Visible', 'off'); % general
set(handles.uipanel11, 'Visible', 'off'); % export
global l2;
if exist('l2','var')==1
    if isempty(l2)==0
        if strcmp(l2.LineStyle,'none')==1
            set(handles.checkbox10,'Value',0,'String','Off'); % visible on off
        else
            set(handles.checkbox10,'Value',1,'String','On'); % visible on off
        end
        set(handles.slider4,'Value',l2.LineWidth/5);
        set(handles.edit23,'String',round(l2.LineWidth*100)/100);
    end
end
end
function checkbox10_Callback(hObject, ~, ~) %#ok<DEFNU>
h=get(hObject,'Value');
global l2;
global lss2;
if lss2==4
    ls='-.';
elseif lss2==3
    ls=':';
elseif lss2==1
    ls='-';
else
    ls='--';
end
if exist('l2','var')==1
    if isempty(l2)==0
        if h==0
            set(hObject,'String','Off');
            l2.Visible='Off';
            l2.LineStyle='none';
        elseif h==1
            set(hObject,'String','On');
            l2.Visible='On';
            l2.LineStyle=ls;
        end
    end
end
end
%% line 2 colour
function pushbutton87_Callback(~, ~, ~) %#ok<DEFNU>
global l2
l2.Color = 'red';
end
function pushbutton88_Callback(~, ~, ~) %#ok<DEFNU>
global l2
l2.Color = 'magenta';
end
function pushbutton96_Callback(~, ~, ~) %#ok<DEFNU>
global l2
l2.Color = 'yellow';
end
function pushbutton89_Callback(~, ~, ~) %#ok<DEFNU>
global l2
l2.Color = 'green';
end
function pushbutton90_Callback(~, ~, ~) %#ok<DEFNU>
global l2
l2.Color = 'cyan';
end
function pushbutton91_Callback(~, ~, ~) %#ok<DEFNU>
global l2
l2.Color = 'blue';
end
function pushbutton95_Callback(~, ~, ~) %#ok<DEFNU>
global l2
l2.Color = [0 0 0];
end
function pushbutton97_Callback(~, ~, ~) %#ok<DEFNU>
global l2
l2.Color = [0.5 0.5 0.5];
end
function pushbutton98_Callback(~, ~, ~) %#ok<DEFNU>
global l2
l2.Color = [1 1 1];
end
%% colorwheel line 2
function togglebutton15_Callback(hObject, ~, handles) %#ok<DEFNU>
p1=getpixelposition(handles.uipanel8); % points panel position
p2=getpixelposition(handles.uipanel16); % colorwheel panel position
global l2
h=get(hObject,'Value');
global colorwheel_selector
colorwheel_selector=4; % means the wheel is setting line 2 color
if h==1
    set(handles.uipanel16, 'Visible', 'on'); % color wheel
    setpixelposition(handles.uipanel16,[p1(1) p1(2)-p2(4)+2 p1(3) p2(4)]);
    axes(handles.axes8);
    cla
    ax8=handles.axes8;
    set(gca,'YTickLabel',[]);
    set(gca,'XTickLabel',[]);
    set(gca,'XTick',[]);
    set(gca,'YTick',[]);
    box on
    axes(handles.axes7);
    cla
    ax7=handles.axes7;
    h=hsv(64);
    hsv_interp = [interp1((1:64)',h(:,1),1:0.3:64); interp1((1:64)',h(:,2),(1:0.3:64)); interp1((1:64)',h(:,3),(1:0.3:64))]';
    imagesc(ax7,(1:size(hsv_interp,1))); colormap(ax7,hsv_interp);
    set(gca,'YTickLabel',[]);
    set(gca,'XTickLabel',[]);
    set(gca,'XTick',[]);
    set(gca,'YTick',[]);
    x=ginput(1);
    x=round(x(1));
    if x<1
        x=1;
    end
    if x>size(hsv_interp,1)
        x=size(hsv_interp,1);
    end
    selected_color=hsv_interp(x,:);
    col2_interp = [interp1([1 size(hsv_interp,1)/2 size(hsv_interp,1)]',[0 selected_color(1) 1],(1:size(hsv_interp,1))') interp1([1 size(hsv_interp,1)/2 size(hsv_interp,1)]',[0 selected_color(2) 1],(1:size(hsv_interp,1))') interp1([1 size(hsv_interp,1)/2 size(hsv_interp,1)]',[0 selected_color(3) 1],(1:size(hsv_interp,1))')];
    axes(handles.axes8);
    imagesc(ax8,(1:size(hsv_interp,1))); colormap (ax8,col2_interp);
    set(gca,'YTickLabel',[]);
    set(gca,'XTickLabel',[]);
    set(gca,'XTick',[]);
    set(gca,'YTick',[]);
    x=ginput(1);
    x=round(x(1));
    if x<1
        x=1;
    end
    if x>size(hsv_interp,1)
        x=size(hsv_interp,1);
    end
    selected_color=col2_interp(x,:);
    if exist('l2','var')==1
        l2.Color=selected_color;
    end
elseif h==0
    set(handles.uipanel16, 'Visible', 'off'); % color wheel
end
end

%% slider linewidth2
function slider4_Callback(hObject, ~, handles) %#ok<DEFNU>
h=get(hObject,'Value');
h=round(h*100)/20;
if h==0
    h=0.05;
end
set(handles.edit23,'String',num2str(h)); % set the contents of the edit box as the slider value
global l2
l2.LineWidth = h;
end
function slider4_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end
end

%% line 2 width edit box
function edit23_Callback(hObject, ~, handles) %#ok<DEFNU>
h=str2double(get(hObject,'String')); %returns contents of edit23 as num
if h<0.05
    h=0.05;
    set(hObject,'String',num2str(h));
end
if h>5
    h=5;
    set(hObject,'String',num2str(h));
end
global l2
l2.LineWidth = h; % set the linewidth
set(handles.slider3,'Value',(h/5)); % set slider to correspond to edit value
end
function edit23_CreateFcn(hObject, ~, ~) %#ok<DEFNU>

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end

%% line style line 2
function pushbutton99_Callback(~, ~, handles) %#ok<DEFNU>
global l2
l2.LineStyle = '-';
global lss2
lss2=1;
set(handles.checkbox9,'String','On');
end
function pushbutton100_Callback(~, ~, handles) %#ok<DEFNU>
global l2
l2.LineStyle = '--';
global lss2
lss2=2;
set(handles.checkbox9,'String','On');
end
function pushbutton101_Callback(~, ~, handles) %#ok<DEFNU>
global l2
l2.LineStyle = ':';
global lss2
lss2=3;
set(handles.checkbox9,'String','On');
end
function pushbutton102_Callback(~, ~, handles) %#ok<DEFNU>
global l2
l2.LineStyle = '-.';
global lss2
lss2=4;
set(handles.checkbox9,'String','On');
end

%% line 2 order
function pushbutton191_Callback(~, ~, ~) %#ok<DEFNU>
global l2
uistack(l2,'up',1);
end
function pushbutton192_Callback(~, ~, ~) %#ok<DEFNU>
global l2
uistack(l2,'up',1);
end


%% export
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%----------------------EXPORT FUNCTIONS-----------------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% export mod
function pushbutton125_Callback(~, ~, handles) %#ok<DEFNU>
p1=getpixelposition(handles.pushbutton125);
p2=getpixelposition(handles.uipanel11);
setpixelposition(handles.uipanel11,[p1(1)+p1(3)-1 p1(2)+p1(4)-p2(4) p2(3) p2(4)]);
set(handles.pushbutton120,'FontWeight','normal'); %points
set(handles.pushbutton146,'FontWeight','normal'); % line 0
set(handles.pushbutton121,'FontWeight','normal'); % line 1
set(handles.pushbutton122,'FontWeight','normal'); % line 2
set(handles.pushbutton123,'FontWeight','normal'); % text
set(handles.pushbutton124,'FontWeight','normal'); % general
set(handles.pushbutton125,'FontWeight','bold'); % export
set(handles.uipanel6, 'Visible', 'off'); % points
set(handles.uipanel14, 'Visible', 'off'); % line0
set(handles.uipanel7, 'Visible', 'off'); % line1
set(handles.uipanel8, 'Visible', 'off'); % line2
set(handles.uipanel9, 'Visible', 'off'); % text
set(handles.uipanel10, 'Visible', 'off'); % general
set(handles.uipanel11, 'Visible', 'on'); % export
set(handles.uipanel16, 'Visible', 'off'); % colors
global output_name
output_name='PACE_output';
global wide
global high
global wide_mod
global high_mod
if wide_mod==1
    set(handles.edit25,'String',num2str(wide));
else
    set(handles.edit25,'String',num2str(84));
    wide=84;
end
if high_mod==1
    set(handles.edit26,'String',num2str(high));
else
    set(handles.edit26,'String',num2str(84));
    high=84;
end
global output_name_txt
output_name_txt='PACE_output_data';
end
function edit25_Callback(hObject, ~, ~) %#ok<DEFNU>
global wide
wide=str2double(get(hObject,'String'));
global wide_mod
wide_mod=1;
global output_name_txt
output_name_txt='PACE_output_data';
set(handles.edit28,output_name_txt);
end
function edit25_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end
function edit26_Callback(hObject, ~, ~) %#ok<DEFNU>
global high
high=str2double(get(hObject,'String'));
global high_mod
high_mod=1;
end
function edit26_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end
%% get file name
function edit27_Callback(hObject, ~, ~) %#ok<DEFNU>
global output_name
output_name=get(hObject,'String');
end
function edit27_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end
% pdf export
function pushbutton41_Callback(~, ~, handles) %#ok<DEFNU>
global wide
global high
global output_name
set(0,'Units','centimeters')
screenSize = get(0, 'ScreenSize');
ax6=handles.axes6;
ax6.Units = 'centimeters';
W_conv=((wide/10-(ax6.TightInset(1)+ax6.TightInset(3)))/ax6.Position(3)); % conversion factor width
H_conv=((high/10-(ax6.TightInset(2)+ax6.TightInset(4)))/ax6.Position(4)); % conversion factor height
f=figure;
f.Units = 'centimeters';
f.Position=[screenSize(3)/2-ax6.Position(1)/2 screenSize(4)/2-ax6.Position(2)/2 ax6.TightInset(1)+ax6.TightInset(3)+ax6.Position(3)*W_conv ax6.TightInset(2)+ax6.TightInset(4)+ax6.Position(4)*H_conv];
ax_copy=copyobj(ax6,f);
ax_copy.Position=[ax6.TightInset(1) ax6.TightInset(2) ax6.Position(3)*W_conv ax6.Position(4)*H_conv];
print(f,output_name,'-dpdf')
close(f);
set(0,'Units','pixels')
end
% jpg export
function pushbutton42_Callback(~, ~, handles) %#ok<DEFNU>
global wide
global high
global output_name
set(0,'Units','centimeters')
screenSize = get(0, 'ScreenSize');
ax6=handles.axes6;
ax6.Units = 'centimeters';
W_conv=((wide/10-(ax6.TightInset(1)+ax6.TightInset(3)))/ax6.Position(3)); % conversion factor width
H_conv=((high/10-(ax6.TightInset(2)+ax6.TightInset(4)))/ax6.Position(4)); % conversion factor height
f=figure;
f.Units = 'centimeters';
f.Position=[screenSize(3)/2-ax6.Position(1)/2 screenSize(4)/2-ax6.Position(2)/2 ax6.TightInset(1)+ax6.TightInset(3)+ax6.Position(3)*W_conv ax6.TightInset(2)+ax6.TightInset(4)+ax6.Position(4)*H_conv];
ax_copy=copyobj(ax6,f);
ax_copy.Position=[ax6.TightInset(1) ax6.TightInset(2) ax6.Position(3)*W_conv ax6.Position(4)*H_conv];
print(f,output_name,'-djpeg')
close(f);
set(0,'Units','pixels')
end
% eps export
function pushbutton43_Callback(~, ~, handles) %#ok<DEFNU>
global wide
global high
global output_name
set(0,'Units','centimeters')
screenSize = get(0, 'ScreenSize');
ax6=handles.axes6;
ax6.Units = 'centimeters';
W_conv=((wide/10-(ax6.TightInset(1)+ax6.TightInset(3)))/ax6.Position(3)); % conversion factor width
H_conv=((high/10-(ax6.TightInset(2)+ax6.TightInset(4)))/ax6.Position(4)); % conversion factor height
f=figure;
f.Units = 'centimeters';
f.Position=[screenSize(3)/2-ax6.Position(1)/2 screenSize(4)/2-ax6.Position(2)/2 ax6.TightInset(1)+ax6.TightInset(3)+ax6.Position(3)*W_conv ax6.TightInset(2)+ax6.TightInset(4)+ax6.Position(4)*H_conv];
ax_copy=copyobj(ax6,f);
ax_copy.Position=[ax6.TightInset(1) ax6.TightInset(2) ax6.Position(3)*W_conv ax6.Position(4)*H_conv];
print(f,output_name,'-depsc')
close(f);
set(0,'Units','pixels')
end
% svg export
function pushbutton44_Callback(~, ~, handles) %#ok<DEFNU>
global wide
global high
global output_name
set(0,'Units','centimeters')
screenSize = get(0, 'ScreenSize');
ax6=handles.axes6;
ax6.Units = 'centimeters';
W_conv=((wide/10-(ax6.TightInset(1)+ax6.TightInset(3)))/ax6.Position(3)); % conversion factor width
H_conv=((high/10-(ax6.TightInset(2)+ax6.TightInset(4)))/ax6.Position(4)); % conversion factor height
f=figure;
f.Units = 'centimeters';
f.Position=[screenSize(3)/2-ax6.Position(1)/2 screenSize(4)/2-ax6.Position(2)/2 ax6.TightInset(1)+ax6.TightInset(3)+ax6.Position(3)*W_conv ax6.TightInset(2)+ax6.TightInset(4)+ax6.Position(4)*H_conv];
ax_copy=copyobj(ax6,f);
ax_copy.Position=[ax6.TightInset(1) ax6.TightInset(2) ax6.Position(3)*W_conv ax6.Position(4)*H_conv];
print(f,output_name,'-dpng')
close(f);
set(0,'Units','pixels')
end
% export tiff
function pushbutton129_Callback(~, ~, handles) %#ok<DEFNU>
global wide
global high
global output_name
set(0,'Units','centimeters')
screenSize = get(0, 'ScreenSize');
ax6=handles.axes6;
ax6.Units = 'centimeters';
W_conv=((wide/10-(ax6.TightInset(1)+ax6.TightInset(3)))/ax6.Position(3)); % conversion factor width
H_conv=((high/10-(ax6.TightInset(2)+ax6.TightInset(4)))/ax6.Position(4)); % conversion factor height
f=figure;
f.Units = 'centimeters';
f.Position=[screenSize(3)/2-ax6.Position(1)/2 screenSize(4)/2-ax6.Position(2)/2 ax6.TightInset(1)+ax6.TightInset(3)+ax6.Position(3)*W_conv ax6.TightInset(2)+ax6.TightInset(4)+ax6.Position(4)*H_conv];
ax_copy=copyobj(ax6,f);
ax_copy.Position=[ax6.TightInset(1) ax6.TightInset(2) ax6.Position(3)*W_conv ax6.Position(4)*H_conv];
print(f,output_name,'-dtiff')
close(f);
set(0,'Units','pixels')
end

% export bmp
function pushbutton130_Callback(~, ~, handles) %#ok<DEFNU>
global wide
global high
global output_name
set(0,'Units','centimeters')
screenSize = get(0, 'ScreenSize');
ax6=handles.axes6;
ax6.Units = 'centimeters';
W_conv=((wide/10-(ax6.TightInset(1)+ax6.TightInset(3)))/ax6.Position(3)); % conversion factor width
H_conv=((high/10-(ax6.TightInset(2)+ax6.TightInset(4)))/ax6.Position(4)); % conversion factor height
f=figure;
f.Units = 'centimeters';
f.Position=[screenSize(3)/2-ax6.Position(1)/2 screenSize(4)/2-ax6.Position(2)/2 ax6.TightInset(1)+ax6.TightInset(3)+ax6.Position(3)*W_conv ax6.TightInset(2)+ax6.TightInset(4)+ax6.Position(4)*H_conv];
ax_copy=copyobj(ax6,f);
ax_copy.Position=[ax6.TightInset(1) ax6.TightInset(2) ax6.Position(3)*W_conv ax6.Position(4)*H_conv];
print(f,output_name,'-dbmp')
close(f);
set(0,'Units','pixels')
end
% export svg
function pushbutton131_Callback(~, ~, handles) %#ok<DEFNU>
global wide
global high
global output_name
set(0,'Units','centimeters')
screenSize = get(0, 'ScreenSize');
ax6=handles.axes6;
ax6.Units = 'centimeters';
W_conv=((wide/10-(ax6.TightInset(1)+ax6.TightInset(3)))/ax6.Position(3)); % conversion factor width
H_conv=((high/10-(ax6.TightInset(2)+ax6.TightInset(4)))/ax6.Position(4)); % conversion factor height
f=figure;
f.Units = 'centimeters';
f.Position=[screenSize(3)/2-ax6.Position(1)/2 screenSize(4)/2-ax6.Position(2)/2 ax6.TightInset(1)+ax6.TightInset(3)+ax6.Position(3)*W_conv ax6.TightInset(2)+ax6.TightInset(4)+ax6.Position(4)*H_conv];
ax_copy=copyobj(ax6,f);
ax_copy.Position=[ax6.TightInset(1) ax6.TightInset(2) ax6.Position(3)*W_conv ax6.Position(4)*H_conv];
print(f,output_name,'-dsvg')
close(f);
set(0,'Units','pixels')
end
% copy to clipboard
function pushbutton201_Callback(~, ~, handles) %#ok<DEFNU>
global wide
global high
set(0,'Units','centimeters')
set(handles.pushbutton1 , 'Cdata' , []);
screenSize = get(0, 'ScreenSize');
ax6=handles.axes6;
ax6.Units = 'centimeters';
W_conv=((wide/10-(ax6.TightInset(1)+ax6.TightInset(3)))/ax6.Position(3)); % conversion factor width
H_conv=((high/10-(ax6.TightInset(2)+ax6.TightInset(4)))/ax6.Position(4)); % conversion factor height
f=figure;
f.Units = 'centimeters';
f.Position=[screenSize(3)/2-ax6.Position(1)/2 screenSize(4)/2-ax6.Position(2)/2 ax6.TightInset(1)+ax6.TightInset(3)+ax6.Position(3)*W_conv ax6.TightInset(2)+ax6.TightInset(4)+ax6.Position(4)*H_conv];
ax_copy=copyobj(ax6,f);
ax_copy.Position=[ax6.TightInset(1) ax6.TightInset(2) ax6.Position(3)*W_conv ax6.Position(4)*H_conv];
f.PaperUnits='centimeters';
f.PaperSize=[wide/10 high/10];
warning off;
print(f,'-clipboard','-dpdf');
close(f);
set(0,'Units','pixels')
end
%% metadata export
function edit28_Callback(hObject, ~, ~) %#ok<DEFNU>
global output_name_txt
output_name_txt=get(hObject,'String');
end
function edit28_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end

function pushbutton202_Callback(~, ~, ~) %#ok<DEFNU>
op=cell(1);
op(1,1)={'PACE Output'};
op(1,2)={convertCharsToStrings(datestr(now))};
global factor;

global profile_length;
if factor==1
    op(3,1)={'Distance, m'};
    op(3,2)=mat2cell(profile_length',1);
elseif factor==1000
    op(3,1)={'Distance, mm'};
    op(3,2)=mat2cell(profile_length'*1000,1);
elseif factor==1000000
    op(3,1)={'Distance, µm'};
    op(3,2)=mat2cell(profile_length'*1000000,1);
elseif factor==1000000000
    op(3,1)={'Distance, nm'};
    op(3,2)=mat2cell(profile_length'*1000000000,1);
end
op(4,1)={'Distance, m'};
op(4,2)=mat2cell(profile_length',1);
global profile;
op(5,1)={'Concentration'};
op(5,2)=mat2cell(profile',1);
global c1;
global c1_err;
op(7,1)={'C1 (fit 1)'};
op(7,2)=mat2cell([(c1) (c1_err)],1);
global c2;
global c2_err;
op(8,1)={'C2 (fit 1)'};
op(8,2)=mat2cell([(c2) (c2_err)],1);
global logDt;
global logDt_err;
op(9,1)={'logDt (fit 1)'};
op(9,2)=mat2cell([(logDt) (logDt_err)],1);
global model_profile_length;
op(10,1)={'model distance (fit 1)'};
op(10,2)=mat2cell(model_profile_length,1);
global model;
op(11,1)={'model concentration (fit 1)'};
op(11,2)=mat2cell(model,1);
global b;
global width;
global FWHM;
global FWHM_G;
global FWHM_L;
op(13,1)={'Beam Type'};
if b==1
    op(13,2)={'circle/ellipse'};
    op(14,1)={'Diameter'};
    op(14,2)=mat2cell(width*factor,1);
elseif b==2
    op(13,2)={'square/rectangle'};
    op(14,1)={'Width'};
    op(14,2)=mat2cell(width*factor,1);
elseif b==3
    op(13,2)={'Gaussian'};
    op(14,1)={'FWHM'};
    op(14,2)=mat2cell(FWHM*factor,1);
elseif b==4
    op(13,2)={'Lorentzian'};
    op(14,1)={'FWHM'};
    op(14,2)=mat2cell(FWHM*factor,1);
    elseif b==5
    op(13,2)={'Voigt'};
    op(14,1)={'FWHM (Voigt); FWHM (Gauss); FWHM (Lorentz)'};
    op(14,2)=mat2cell([FWHM*factor FWHM_G*factor FWHM_L*factor],1);
end
global c1n;
global c1n_err;
op(16,1)={'C1 (fit 2)'};
op(16,2)=mat2cell([(c1n) (c1n_err)],1);
global c2n;
global c2n_err;
op(17,1)={'C2 (fit 2)'};
op(17,2)=mat2cell([(c2n) (c2n_err)],1);
global logDt2;
global logDt2_err;
op(18,1)={'logDt (fit 2)'};
op(18,2)=mat2cell([(logDt2) (logDt2_err)],1);
global model_x
op(19,1)={'model distance (fit 2)'};
op(19,2)=mat2cell(model_x,1);
global convoluted
op(20,1)={'convoluted (fit 2)'};
op(20,2)=mat2cell(convoluted,1);
global original
op(21,1)={'deconvoluted (fit 2)'};
op(21,2)=mat2cell(original,1);
global output_name_txt;
writecell(op,strcat(output_name_txt,'.xlsx'));
end


%% txt
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%------------------------TEXT FUNCTIONS-----------------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% text mod
function pushbutton123_Callback(~, ~, handles) %#ok<DEFNU>
p1=getpixelposition(handles.pushbutton123);
p2=getpixelposition(handles.uipanel9);
setpixelposition(handles.uipanel9,[p1(1)+p1(3)-1 p1(2)+p1(4)-p2(4) p2(3) p2(4)]);
set(handles.pushbutton120,'FontWeight','normal'); %points
set(handles.pushbutton146,'FontWeight','normal'); % line 0
set(handles.pushbutton121,'FontWeight','normal'); % line 1
set(handles.pushbutton122,'FontWeight','normal'); % line 2
set(handles.pushbutton123,'FontWeight','bold'); % text
set(handles.pushbutton124,'FontWeight','normal'); % general
set(handles.pushbutton125,'FontWeight','normal'); % export
set(handles.uipanel6, 'Visible', 'off'); % points
set(handles.uipanel14, 'Visible', 'off'); % line0
set(handles.uipanel7, 'Visible', 'off'); % line1
set(handles.uipanel8, 'Visible', 'off'); % line2
set(handles.uipanel9, 'Visible', 'on'); % text
set(handles.uipanel10, 'Visible', 'off'); % general
set(handles.uipanel11, 'Visible', 'off'); % export
set(handles.uipanel16, 'Visible', 'off'); % colors
end
%font size
function edit11_Callback(hObject, ~, ~) %#ok<DEFNU>
h=str2double(get(hObject,'String'));
set(gca,'FontSize',h);
global t1
set(t1,'FontSize',h);
global lgd
lgd.FontSize = h;
end
function edit11_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end
% font selection
function popupmenu2_Callback(hObject, ~, ~) %#ok<DEFNU>
contents = cellstr(get(hObject,'String'));
h=contents{get(hObject,'Value')};
set(gca, 'FontName', h);
global t1
set(t1,'FontName',h);
global lgd
lgd.FontName = h;
end
function popupmenu2_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end
% x label
function edit12_Callback(hObject, ~, ~) %#ok<DEFNU>
h=get(hObject,'String');
xlabel(h);
end
function edit12_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end
% Y label
function edit13_Callback(hObject, ~, ~) %#ok<DEFNU>
h=get(hObject,'String');
ylabel(h);
end
function edit13_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end

%% label visibility
function checkbox13_Callback(hObject, ~, handles) %#ok<DEFNU>
global t1
h=get(hObject,'Value');
if h==0
    t1.Visible='off';
    set(handles.checkbox13,'String','Off')
elseif h==1
    t1.Visible='on';
    set(handles.checkbox13,'String','On')
end
end

%% label position
function pushbutton114_Callback(~, ~, ~) %#ok<DEFNU>
x_bump=diff(get(gca,'xlim'))/100;
global t1
pos=get(t1,'Position');
set(t1,'Position',[pos(1)+x_bump pos(2)]);
end
function pushbutton115_Callback(~, ~, ~) %#ok<DEFNU>
y_bump=diff(get(gca,'ylim'))/100;
global t1
pos=get(t1,'Position');
set(t1,'Position',[pos(1) pos(2)+y_bump]);
end
function pushbutton116_Callback(~, ~, ~) %#ok<DEFNU>
x_bump=diff(get(gca,'xlim'))/100;
global t1
pos=get(t1,'Position');
set(t1,'Position',[pos(1)-x_bump pos(2)]);
end
function pushbutton117_Callback(~, ~, ~) %#ok<DEFNU>
y_bump=diff(get(gca,'ylim'))/100;
global t1
pos=get(t1,'Position');
set(t1,'Position',[pos(1) pos(2)-y_bump]);
end

%% legend visibilty
function checkbox14_Callback(hObject, ~, handles) %#ok<DEFNU>
h=get(hObject,'Value');
global lgd
if h==0
    lgd.Visible='off';
    set(handles.checkbox14,'String','Off')
elseif h==1
    lgd.Visible='on';
    set(handles.checkbox14,'String','On')
end
end
% move legend clockwise
function pushbutton203_Callback(~, ~, ~) %#ok<DEFNU>
% h=get(hObject,'Value');
global lgd
h=lgd.Location;
if strcmp(h,'northwest')==1
    lgd.Location='north';
elseif strcmp(h,'north')==1
    lgd.Location='northeast';
elseif strcmp(h,'northeast')==1
    lgd.Location='east';
elseif strcmp(h,'east')==1
    lgd.Location='southeast';
elseif strcmp(h,'southeast')==1
    lgd.Location='south';
elseif strcmp(h,'south')==1
    lgd.Location='southwest';
elseif strcmp(h,'southwest')==1
    lgd.Location='west';
elseif strcmp(h,'west')==1
    lgd.Location='northwest';
end
end
% move legend anticlockwise
function pushbutton204_Callback(~, ~, ~) %#ok<DEFNU>
% h=get(hObject,'Value');
global lgd
h=lgd.Location;
if strcmp(h,'northwest')==1
    lgd.Location='west';
elseif strcmp(h,'north')==1
    lgd.Location='northwest';
elseif strcmp(h,'northeast')==1
    lgd.Location='north';
elseif strcmp(h,'east')==1
    lgd.Location='northeast';
elseif strcmp(h,'southeast')==1
    lgd.Location='east';
elseif strcmp(h,'south')==1
    lgd.Location='southeast';
elseif strcmp(h,'southwest')==1
    lgd.Location='south';
elseif strcmp(h,'west')==1
    lgd.Location='southwest';
end
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%---------------------------ALL GENERAL OPTIONS---------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%---------------------------TICKS,BORDERS,LIMITS--------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% general mod
function pushbutton124_Callback(~, ~, handles) %#ok<DEFNU>
p1=getpixelposition(handles.pushbutton124);
p2=getpixelposition(handles.uipanel10);
setpixelposition(handles.uipanel10,[p1(1)+p1(3)-1 p1(2)+p1(4)-p2(4) p2(3) p2(4)]);
set(handles.pushbutton120,'FontWeight','normal'); %points
set(handles.pushbutton146,'FontWeight','normal'); % line 0
set(handles.pushbutton121,'FontWeight','normal'); % line 1
set(handles.pushbutton122,'FontWeight','normal'); % line 2
set(handles.pushbutton123,'FontWeight','normal'); % text
set(handles.pushbutton124,'FontWeight','bold'); % general
set(handles.pushbutton125,'FontWeight','normal'); % export
set(handles.uipanel6, 'Visible', 'off'); % points
set(handles.uipanel14, 'Visible', 'off'); % line0
set(handles.uipanel7, 'Visible', 'off'); % line1
set(handles.uipanel8, 'Visible', 'off'); % line2
set(handles.uipanel9, 'Visible', 'off'); % text
set(handles.uipanel10, 'Visible', 'on'); % general
set(handles.uipanel11, 'Visible', 'off'); % export
set(handles.uipanel16, 'Visible', 'off'); % colors
end
%% ticks
function pushbutton103_Callback(~, ~, handles) %#ok<DEFNU>
ax6=handles.axes6;
set(ax6,'TickDir','in');
end
function pushbutton106_Callback(~, ~, handles) %#ok<DEFNU>
ax6=handles.axes6;
set(ax6,'TickDir','out');
end
function pushbutton107_Callback(~, ~, handles) %#ok<DEFNU>
ax6=handles.axes6;
set(ax6,'TickDir','both');
end
%% border styles
function pushbutton148_Callback(~, ~, handles) %#ok<DEFNU>
ax6=handles.axes6;
box(ax6,'on')
end
function pushbutton149_Callback(~, ~, handles) %#ok<DEFNU>
ax6=handles.axes6;
box(ax6,'off')
end
%% border width slider and text box
function edit14_Callback(hObject, ~, handles) %#ok<DEFNU>
ax6=handles.axes6;
h=str2double(get(hObject,'String')); %returns contents of edit14 as text
if h<0.05
    h=0.05;
end
if h>5
    h=5;
end
set(hObject,'String',num2str(h));
set(handles.slider6,'Value',h);
set(ax6,'linewidth',h);
end
function edit14_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end
function slider6_Callback(hObject, ~, handles) %#ok<DEFNU>
h=round(get(hObject,'Value')*20)/20;
set(handles.edit14,'String',num2str(h));
set(gca,'linewidth',h);
end
function slider6_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end
end
%% x limits
% min
function edit15_Callback(hObject, ~, ~) %#ok<DEFNU>
global t1 %t1 is the text label
pos=get(t1,'Position'); % get old text position
g=get(gca,'xlim'); % get previous x limits
g2=get(gca,'ylim'); % get previous y limits
rel_x_pos=(pos(1)-g(1))/(g(2)-g(1)); % relative x position
h=str2double(get(hObject,'String')); % read desired x limit
xlim([h g(2)]); % set new x limits
ylim(g2); % keep y limits the same
set(t1,'Position',[rel_x_pos*(g(2)-h)+h pos(2)]); %set text so it doesnt move relative position
end
function edit15_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end
% max
function edit16_Callback(hObject, ~, ~) %#ok<DEFNU>
global t1 %t1 is the text label
pos=get(t1,'Position'); % get old text position
g=get(gca,'xlim'); % get previous x limits
g2=get(gca,'ylim'); % get previous y limits
rel_x_pos=(pos(1)-g(1))/(g(2)-g(1)); % relative x position
h=str2double(get(hObject,'String')); % read desired x limit
xlim([g(1) h]); % set new x limits
ylim(g2); % keep y limits the same
set(t1,'Position',[rel_x_pos*(h-g(1))+g(1) pos(2)]); %set text so it doesnt move relative position
end
function edit16_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end
%reset the limits
function pushbutton151_Callback(~, ~, handles) %#ok<DEFNU>
global t1 %t1 is the text label
pos=get(t1,'Position'); % get old text position
g=get(gca,'xlim'); % get previous x limits
g2=get(gca,'ylim'); % get previous y limits
rel_x_pos=(pos(1)-g(1))/(g(2)-g(1)); % relative x position
global profile_length
global factor
l=[min(profile_length*factor) max(profile_length*factor)]; % find new limits
xlim([min(profile_length*factor) max(profile_length*factor)]); % reset to min and max of data
ylim(g2); % keep y limits the same
set(t1,'Position',[rel_x_pos*(l(2)-l(1))+l(1) pos(2)]); %set text so it doesnt move relative position
set(handles.edit15,'String',sprintf('%0.1f',min(profile_length*factor)));
set(handles.edit16,'String',sprintf('%0.1f',max(profile_length*factor)));
end

%% y limits
% min
function edit17_Callback(hObject, ~, ~) %#ok<DEFNU>
global t1 %t1 is the text label
pos=get(t1,'Position'); % get old text position
g=get(gca,'xlim'); % get previous x limits
g2=get(gca,'ylim'); % get previous y limits
rel_y_pos=(pos(2)-g2(1))/(g2(2)-g2(1)); % relative y position
h=str2double(get(hObject,'String')); % read desired y limit
xlim(g); % keep x limits the same
ylim([h g2(2)]); % set new y lims
set(t1,'Position',[pos(1) rel_y_pos*(g2(2)-h)+h]); %set text so it doesnt move relative position
end
function edit17_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end
% y max
function edit18_Callback(hObject, ~, ~) %#ok<DEFNU>
global t1 %t1 is the text label
pos=get(t1,'Position'); % get old text position
g=get(gca,'xlim'); % get previous x limits
g2=get(gca,'ylim'); % get previous y limits
rel_y_pos=(pos(2)-g2(1))/(g2(2)-g2(1)); % relative y position
h=str2double(get(hObject,'String')); % read desired y limit
xlim(g); % keep x limits the same
ylim([g2(1) h]); % set new y lims
set(t1,'Position',[pos(1) rel_y_pos*(h-g2(1))+g2(1)]); %set text so it doesnt move relative position
end
function edit18_CreateFcn(hObject, ~, ~) %#ok<DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end
% reset y limits
function pushbutton152_Callback(~, ~, handles) %#ok<DEFNU>
global t1 %t1 is the text label
pos=get(t1,'Position'); % get old text position
g=get(gca,'xlim'); % get previous x limits
g2=get(gca,'ylim'); % get previous y limits
rel_y_pos=(pos(2)-g2(1))/(g2(2)-g2(1)); % relative y position
global ylim_initial % pull in the old y lims
set(handles.edit17,'String',sprintf('%0.1f',ylim_initial(1))); % reset the edit text boxes
set(handles.edit18,'String',sprintf('%0.1f',ylim_initial(2))); % reset the edit text boxes
xlim(g); % keep x the same
ylim(ylim_initial); % set y lims back to initial lims
set(t1,'Position',[pos(1) rel_y_pos*(ylim_initial(2)-ylim_initial(1))+ylim_initial(1)]); %set text so it doesnt move relative position
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%-------------------------DATA EXCLUSION TOGGLES--------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% exclude data, first plot
function togglebutton8_Callback(hObject, ~, handles) %#ok<DEFNU>
global profile_length;
global profile;
global s0; % first points
global s0e; % scatter, excluded points
global factor;
global s;
global se;
global profile_length_brushed;
global profile_brushed;
ax4=handles.axes4;
ax6=handles.axes6;
if isempty(factor)==1
    factor=1;
end
while get(hObject,'Value')==1
    brush on
    %     profile_length_brushed=profile_length;
    %     profile_brushed=profile;
    w=waitforbuttonpress;
    %     w=waitforbuttonpress;
    if w==1
        profile_length_brushed_temp=profile_length;
        profile_brushed_temp=profile;
        %             w=waitforbuttonpress;
        yl=get(ax4,'ylim');
        xl=get(ax4,'xlim');
        br = get(s0, 'BrushData');
        profile_length_brushed_temp(br==0)=[];
        profile_brushed_temp(br==0)=[];
        profile_length(br==1)=[];
        profile(br==1)=[];
        profile_length_brushed=[profile_length_brushed_temp;profile_length_brushed]; %#ok<*AGROW>
        profile_brushed=[profile_brushed_temp;profile_brushed];
        delete (s0);
        s0=scatter(ax4,profile_length*factor,profile, 'filled','MarkerEdgeColor','black','MarkerFaceColor',[0.5 0.5 0.5]);
        hold on
        delete (s0e);
        s0e=scatter(ax4,profile_length_brushed*factor,profile_brushed, 'filled','MarkerEdgeColor','black','MarkerFaceColor',[0.5 0.5 0.5],'MarkerFaceAlpha',0.25,'MarkerEdgeAlpha',0.25);
        uistack(s0,'bottom');
        uistack(s0e,'bottom');
        xlim(ax4,xl);
        ylim(ax4,yl);
        if isempty(s)==0
            yl=get(ax6,'ylim');
            xl=get(ax6,'xlim');
            delete(s);
            s=scatter(ax6,profile_length*factor,profile, 'filled','MarkerEdgeColor','black','MarkerFaceColor',[0.5 0.5 0.5],'DisplayName','Data');
            hold on
            delete (se);
            se=scatter(ax6,profile_length_brushed*factor,profile_brushed, 'filled','MarkerEdgeColor','black','MarkerFaceColor',[0.5 0.5 0.5],'MarkerFaceAlpha',0.25,'MarkerEdgeAlpha',0.25,'DisplayName','Deleted data');
%             uistack(s,'bottom');
%             uistack(se,'bottom');
            xlim(ax6,xl);
            ylim(ax6,yl);
        end
    end
end
if get(hObject,'Value')==0
    brush off
end
end

% exclude reset, first plot
function pushbutton155_Callback(~, ~, handles) %#ok<DEFNU>
global s0
global s0e
global profile_length_original
global profile_original
global profile
global profile_length
global factor
global s
global se
set(handles.togglebutton8,'Value',0);
brush off
profile_length=profile_length_original/factor;
profile=profile_original;
ax4=handles.axes4;
ax6=handles.axes6;
yl=get(ax4,'ylim');
xl=get(ax4,'xlim');
delete(s0)
delete(s0e)
s0=scatter(ax4,profile_length*factor,profile, 'filled','MarkerEdgeColor','black','MarkerFaceColor',[0.5 0.5 0.5]);
uistack(s0,'bottom');
hold on
xlim(ax4,xl);
ylim(ax4,yl);
% axes(handles.axes6);
yl=get(ax6,'ylim');
xl=get(ax6,'xlim');
delete(s)
delete(se)
s=scatter(ax6,profile_length*factor,profile, 'filled','MarkerEdgeColor','black','MarkerFaceColor',[0.5 0.5 0.5],'DisplayName','Data');
% uistack(s,'bottom');
hold on
xlim(ax6,xl);
ylim(ax6,yl);
end

% exclude data second plot
function togglebutton11_Callback(hObject, ~, handles) %#ok<DEFNU>
global profile_length
global profile
global s0 % first points
global s0e % scatter, excluded points
global factor
global s;
global se;
global profile_length_brushed;
global profile_brushed;
ax4=handles.axes4;
ax6=handles.axes6;
while get(hObject,'Value')==1
    brush on
    profile_length_brushed_temp=profile_length;
    profile_brushed_temp=profile;
    %   w=waitforbuttonpress;
    w=waitforbuttonpress;
    if w==1
        %         axes(handles.axes6);
        yl=get(ax6,'ylim');
        xl=get(ax6,'xlim');
        br = get(s, 'BrushData');
        profile_length_brushed_temp(br==0)=[];
        profile_brushed_temp(br==0)=[];
        profile_length(br==1)=[];
        profile(br==1)=[];
        profile_length_brushed=[profile_length_brushed_temp;profile_length_brushed]; %#ok<*AGROW>
        profile_brushed=[profile_brushed_temp;profile_brushed];
        delete (s);
        s=scatter(ax6,profile_length*factor,profile, 'filled','MarkerEdgeColor','black','MarkerFaceColor',[0.5 0.5 0.5],'DisplayName','Data');
        hold on
        delete (se)
        se=scatter(ax6,profile_length_brushed*factor,profile_brushed, 'filled','MarkerEdgeColor','black','MarkerFaceColor',[0.5 0.5 0.5],'MarkerFaceAlpha',0.25,'MarkerEdgeAlpha',0.25,'DisplayName','Deleted data');
        uistack(s,'bottom');
        uistack(se,'bottom');
        xlim(ax6,xl);
        ylim(ax6,yl);
        %         axes(handles.axes4);
        yl=get(ax4,'ylim');
        xl=get(ax4,'xlim');
        delete(s0);
        s0=scatter(ax4,profile_length*factor,profile, 'filled','MarkerEdgeColor','black','MarkerFaceColor',[0.5 0.5 0.5]);
        hold on
        delete(s0e)
        s0e=scatter(ax4,profile_length_brushed*factor,profile_brushed, 'filled','MarkerEdgeColor','black','MarkerFaceColor',[0.5 0.5 0.5],'MarkerFaceAlpha',0.25,'MarkerEdgeAlpha',0.25);
%         uistack(s0,'bottom');
%         uistack(s0e,'bottom');
        xlim(ax4,xl);
        ylim(ax4,yl);
    end
end
if get(hObject,'Value')==0
    brush off
end
end

%  exclude data reset second plot
function pushbutton156_Callback(~, ~, handles) %#ok<DEFNU>
global s0
global s0e
global profile_length_original
global profile_original
global profile
global profile_length
global factor
global s
global se
set(handles.togglebutton11,'Value',0);
profile_length=profile_length_original/factor;
profile=profile_original;
ax4=handles.axes4;
ax6=handles.axes6;
yl=get(ax4,'ylim');
xl=get(ax4,'xlim');
delete(s0)
delete(s0e)
s0=scatter(ax4,profile_length*factor,profile, 'filled','MarkerEdgeColor','black','MarkerFaceColor',[0.5 0.5 0.5]);
uistack(s0,'bottom');
hold on
xlim(ax4,xl);
ylim(ax4,yl);
yl=get(ax6,'ylim');
xl=get(ax6,'xlim');
delete(s)
delete(se)
s=scatter(ax6,profile_length*factor,profile, 'filled','MarkerEdgeColor','black','MarkerFaceColor',[0.5 0.5 0.5],'DisplayName','Data');
% uistack(s,'bottom');
hold on
xlim(ax6,xl);
ylim(ax6,yl);
end


% export to clipboard simple first plot
function togglebutton17_Callback(~, ~, ~) %#ok<DEFNU>
global logDt;
global logDt_err;
global c1;
global c1_err;
global c2;
global c2_err;
data=[logDt, logDt_err; c1, c1_err; c2, c2_err];
%modified from num2clip
%Author: Grigor Browning
%Last update: 02-Sept-2005
data = num2str(data);
data(:,end+1) = newline;
data = reshape(data',1,prod(size(data)));  %#ok<PSIZE>
datashift = [' ',data];
data = [data,' '];
data = data((double(data)~=32 | double(datashift)~=32) & ~(double(datashift==10) & double(data)==32) );
data(double(data)==32) = char(9);
clipboard('copy',data);
end

function Answer=newid(Prompt, Title, NumLines, DefAns, Resize)
%INPUTDLG Input dialog box.
%  ANSWER = INPUTDLG(PROMPT) creates a modal dialog box that returns user
%  input for multiple prompts in the cell array ANSWER. PROMPT is a cell
%  array containing the PROMPT strings.
%
%  INPUTDLG uses UIWAIT to suspend execution until the user responds.
%
%  ANSWER = INPUTDLG(PROMPT,NAME) specifies the title for the dialog.
%
%  ANSWER = INPUTDLG(PROMPT,NAME,NUMLINES) specifies the number of lines for
%  each answer in NUMLINES. NUMLINES may be a constant value or a column
%  vector having one element per PROMPT that specifies how many lines per
%  input field. NUMLINES may also be a matrix where the first column
%  specifies how many rows for the input field and the second column
%  specifies how many columns wide the input field should be.
%
%  ANSWER = INPUTDLG(PROMPT,NAME,NUMLINES,DEFAULTANSWER) specifies the
%  default answer to display for each PROMPT. DEFAULTANSWER must contain
%  the same number of elements as PROMPT and must be a cell array of
%  strings.
%
%  ANSWER = INPUTDLG(PROMPT,NAME,NUMLINES,DEFAULTANSWER,OPTIONS) specifies
%  additional options. If OPTIONS is the string 'on', the dialog is made
%  resizable. If OPTIONS is a structure, the fields Resize, WindowStyle, and
%  Interpreter are recognized. Resize can be either 'on' or
%  'off'. WindowStyle can be either 'normal' or 'modal'. Interpreter can be
%  either 'none' or 'tex'. If Interpreter is 'tex', the prompt strings are
%  rendered using LaTeX.
%
%  Examples:
%
%  prompt={'Enter the matrix size for x^2:','Enter the colormap name:'};
%  name='Input for Peaks function';
%  numlines=1;
%  defaultanswer={'20','hsv'};
%
%  answer=inputdlg(prompt,name,numlines,defaultanswer);
%
%  options.Resize='on';
%  options.WindowStyle='normal';
%  options.Interpreter='tex';
%
%  answer=inputdlg(prompt,name,numlines,defaultanswer,options);
%
%  See also DIALOG, ERRORDLG, HELPDLG, LISTDLG, MSGBOX,
%    QUESTDLG, TEXTWRAP, UIWAIT, WARNDLG .

%  Copyright 1994-2005 The MathWorks, Inc.
%  $Revision: 1.58.4.11 $

%%%%%%%%%%%%%%%%%%%%
%%% Nargin Check %%%
%%%%%%%%%%%%%%%%%%%%
error(nargchk(0,5,nargin));
error(nargoutchk(0,1,nargout));

%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Handle Input Args %%%
%%%%%%%%%%%%%%%%%%%%%%%%%
if nargin<1
    Prompt='Input:';
end
if ~iscell(Prompt)
    Prompt={Prompt};
end
NumQuest=numel(Prompt);


if nargin<2,
    Title=' ';
end

if nargin<3
    NumLines=1;
end

if nargin<4 
    DefAns=cell(NumQuest,1);
    for lp=1:NumQuest
        DefAns{lp}='';
    end
end

if nargin<5
    Resize = 'off';
end
WindowStyle='modal';
Interpreter='none';

Options = struct([]); %#ok
if nargin==5 && isstruct(Resize)
    Options = Resize;
    Resize  = 'off';
    if isfield(Options,'Resize'),      Resize=Options.Resize;           end
    if isfield(Options,'WindowStyle'), WindowStyle=Options.WindowStyle; end
    if isfield(Options,'Interpreter'), Interpreter=Options.Interpreter; end
end

[rw,cl]=size(NumLines);
OneVect = ones(NumQuest,1);
if (rw == 1 & cl == 2) %#ok Handle []
    NumLines=NumLines(OneVect,:);
elseif (rw == 1 & cl == 1) %#ok
    NumLines=NumLines(OneVect);
elseif (rw == 1 & cl == NumQuest) %#ok
    NumLines = NumLines';
elseif (rw ~= NumQuest | cl > 2) %#ok
    error('MATLAB:inputdlg:IncorrectSize', 'NumLines size is incorrect.')
end

if ~iscell(DefAns),
    error('MATLAB:inputdlg:InvalidDefaultAnswer', 'Default Answer must be a cell array of strings.');
end

%%%%%%%%%%%%%%%%%%%%%%%
%%% Create InputFig %%%
%%%%%%%%%%%%%%%%%%%%%%%
FigWidth=175;
FigHeight=100;
FigPos(3:4)=[FigWidth FigHeight];  %#ok
FigColor=get(0,'DefaultUicontrolBackgroundcolor');

InputFig=dialog(                     ...
    'Visible'          ,'off'      , ...
    'KeyPressFcn'      ,@doFigureKeyPress, ...
    'Name'             ,Title      , ...
    'Pointer'          ,'arrow'    , ...
    'Units'            ,'pixels'   , ...
    'UserData'         ,'Cancel'   , ...
    'Tag'              ,Title      , ...
    'HandleVisibility' ,'callback' , ...
    'Color'            ,FigColor   , ...
    'NextPlot'         ,'add'      , ...
    'WindowStyle'      ,WindowStyle, ...
    'DoubleBuffer'     ,'on'       , ...
    'Resize'           ,Resize       ...
    );


%%%%%%%%%%%%%%%%%%%%%
%%% Set Positions %%%
%%%%%%%%%%%%%%%%%%%%%
DefOffset    = 5;
DefBtnWidth  = 53;
DefBtnHeight = 23;

TextInfo.Units              = 'pixels'   ;   
TextInfo.FontSize           = get(0,'FactoryUIControlFontSize');
TextInfo.FontWeight         = get(InputFig,'DefaultTextFontWeight');
TextInfo.HorizontalAlignment= 'left'     ;
TextInfo.HandleVisibility   = 'callback' ;

StInfo=TextInfo;
StInfo.Style              = 'text'  ;
StInfo.BackgroundColor    = FigColor;


EdInfo=StInfo;
EdInfo.FontWeight      = get(InputFig,'DefaultUicontrolFontWeight');
EdInfo.Style           = 'edit';
EdInfo.BackgroundColor = 'white';

BtnInfo=StInfo;
BtnInfo.FontWeight          = get(InputFig,'DefaultUicontrolFontWeight');
BtnInfo.Style               = 'pushbutton';
BtnInfo.HorizontalAlignment = 'center';

% Add VerticalAlignment here as it is not applicable to the above.
TextInfo.VerticalAlignment  = 'bottom';
TextInfo.Color              = get(0,'FactoryUIControlForegroundColor');


% adjust button height and width
btnMargin=1.4;
ExtControl=uicontrol(InputFig   ,BtnInfo     , ...
                     'String'   ,'OK'        , ...
                     'Visible'  ,'off'         ...
                     );

% BtnYOffset  = DefOffset;
BtnExtent = get(ExtControl,'Extent');
BtnWidth  = max(DefBtnWidth,BtnExtent(3)+8);
BtnHeight = max(DefBtnHeight,BtnExtent(4)*btnMargin);
delete(ExtControl);

% Determine # of lines for all Prompts
TxtWidth=FigWidth-2*DefOffset;
ExtControl=uicontrol(InputFig   ,StInfo     , ...
                     'String'   ,''         , ...
                     'Position' ,[ DefOffset DefOffset 0.96*TxtWidth BtnHeight ] , ...
                     'Visible'  ,'off'        ...
                     );

WrapQuest=cell(NumQuest,1);
QuestPos=zeros(NumQuest,4);

for ExtLp=1:NumQuest
    if size(NumLines,2)==2
        [WrapQuest{ExtLp},QuestPos(ExtLp,1:4)]= ...
            textwrap(ExtControl,Prompt(ExtLp),NumLines(ExtLp,2));
    else
        [WrapQuest{ExtLp},QuestPos(ExtLp,1:4)]= ...
            textwrap(ExtControl,Prompt(ExtLp),80);
    end
end % for ExtLp

delete(ExtControl);
QuestWidth =QuestPos(:,3);
QuestHeight=QuestPos(:,4);

TxtHeight=QuestHeight(1)/size(WrapQuest{1,1},1);
EditHeight=TxtHeight*NumLines(:,1);
EditHeight(NumLines(:,1)==1)=EditHeight(NumLines(:,1)==1)+4;

FigHeight=(NumQuest+2)*DefOffset    + ...
          BtnHeight+sum(EditHeight) + ...
          sum(QuestHeight);

TxtXOffset=DefOffset;

QuestYOffset=zeros(NumQuest,1);
EditYOffset=zeros(NumQuest,1);
QuestYOffset(1)=FigHeight-DefOffset-QuestHeight(1);
EditYOffset(1)=QuestYOffset(1)-EditHeight(1);

for YOffLp=2:NumQuest,
    QuestYOffset(YOffLp)=EditYOffset(YOffLp-1)-QuestHeight(YOffLp)-DefOffset;
    EditYOffset(YOffLp)=QuestYOffset(YOffLp)-EditHeight(YOffLp);
end % for YOffLp

QuestHandle=[]; %#ok
EditHandle=[];

AxesHandle=axes('Parent',InputFig,'Position',[0 0 1 1],'Visible','off');

inputWidthSpecified = false;

for lp=1:NumQuest,
    if ~ischar(DefAns{lp}),
        delete(InputFig);
        %error('Default Answer must be a cell array of strings.');
        error('MATLAB:inputdlg:InvalidInput', 'Default Answer must be a cell array of strings.');
    end

    EditHandle(lp)=uicontrol(InputFig    , ...
                             EdInfo      , ...
                             'Max'        ,NumLines(lp,1)       , ...
                             'Position'   ,[ TxtXOffset EditYOffset(lp) TxtWidth EditHeight(lp) ], ...
                             'String'     ,DefAns{lp}           , ...
                             'Tag'        ,'Edit',                ...
                              'Callback' ,@doEnter);
                             

    QuestHandle(lp)=text('Parent'     ,AxesHandle, ...
                         TextInfo     , ...
                         'Position'   ,[ TxtXOffset QuestYOffset(lp)], ...
                         'String'     ,WrapQuest{lp}                 , ...
                         'Interpreter',Interpreter                   , ...
                         'Tag'        ,'Quest'                         ...
                         );

    MinWidth = max(QuestWidth(:));
    if (size(NumLines,2) == 2)
        % input field width has been specified.
        inputWidthSpecified = true;
        EditWidth = setcolumnwidth(EditHandle(lp), NumLines(lp,1), NumLines(lp,2));
        MinWidth = max(MinWidth, EditWidth);
    end
    FigWidth=max(FigWidth, MinWidth+2*DefOffset);

end % for lp

% fig width may have changed, update the edit fields if they dont have user specified widths.
if ~inputWidthSpecified
    TxtWidth=FigWidth-2*DefOffset;
    for lp=1:NumQuest
        set(EditHandle(lp), 'Position', [TxtXOffset EditYOffset(lp) TxtWidth EditHeight(lp)]);
    end
end

FigPos=get(InputFig,'Position');

FigWidth=max(FigWidth,2*(BtnWidth+DefOffset)+DefOffset);
FigPos(1)=0;
FigPos(2)=0;
FigPos(3)=FigWidth;
FigPos(4)=FigHeight;

set(InputFig,'Position',getnicedialoglocation(FigPos,get(InputFig,'Units')));

OKHandle=uicontrol(InputFig     ,              ...
                   BtnInfo      , ...
                   'Position'   ,[ FigWidth-2*BtnWidth-2*DefOffset DefOffset BtnWidth BtnHeight ] , ...
                   'KeyPressFcn',@doControlKeyPress , ...
                   'String'     ,'OK'        , ...
                   'Callback'   ,@doCallback , ...
                   'Tag'        ,'OK'        , ...
                   'UserData'   ,'OK'          ...
                   );

setdefaultbutton(InputFig, OKHandle);

CancelHandle=uicontrol(InputFig     ,              ...
                       BtnInfo      , ...
                       'Position'   ,[ FigWidth-BtnWidth-DefOffset DefOffset BtnWidth BtnHeight ]           , ...
                       'KeyPressFcn',@doControlKeyPress            , ...
                       'String'     ,'Cancel'    , ...
                       'Callback'   ,@doCallback , ...
                       'Tag'        ,'Cancel'    , ...
                       'UserData'   ,'Cancel'      ...
                       ); %#ok

handles = guihandles(InputFig);
handles.MinFigWidth = FigWidth;
handles.FigHeight   = FigHeight;
handles.TextMargin  = 2*DefOffset;
guidata(InputFig,handles);
set(InputFig,'ResizeFcn', {@doResize, inputWidthSpecified});

% make sure we are on screen
movegui(InputFig)

% if there is a figure out there and it's modal, we need to be modal too
if ~isempty(gcbf) && strcmp(get(gcbf,'WindowStyle'),'modal')
    set(InputFig,'WindowStyle','modal');
end

set(InputFig,'Visible','on');
drawnow;

if ~isempty(EditHandle)
    uicontrol(EditHandle(1));
end

uiwait(InputFig);

if ishandle(InputFig)
    Answer={};
    if strcmp(get(InputFig,'UserData'),'OK'),
        Answer=cell(NumQuest,1);
        for lp=1:NumQuest,
            Answer(lp)=get(EditHandle(lp),{'String'});
        end
    end
    delete(InputFig);
else
    Answer={};
end

end

function doFigureKeyPress(obj, evd) %#ok
switch(evd.Key)
 case {'return','space'}
  set(gcbf,'UserData','OK');
  uiresume(gcbf);
 case {'escape'}
  delete(gcbf);
end

end

function doControlKeyPress(obj, evd) %#ok
switch(evd.Key)
 case {'return'}
  if ~strcmp(get(obj,'UserData'),'Cancel')
      set(gcbf,'UserData','OK');
      uiresume(gcbf);
  else
      delete(gcbf)
  end
 case 'escape'
  delete(gcbf)
end

end

function doCallback(obj, evd) %#ok
if ~strcmp(get(obj,'UserData'),'Cancel')
    set(gcbf,'UserData','OK');
    uiresume(gcbf);
else
    delete(gcbf)
end

end

function doEnter(obj, evd) %#ok

h = get(obj,'Parent');
x = get(h,'CurrentCharacter');
if unicode2native(x) == 13
    doCallback(obj,evd);
end

end


function doResize(FigHandle, evd, multicolumn) %#ok
% TBD: Check difference in behavior w/ R13. May need to implement
% additional resize behavior/clean up.

Data=guidata(FigHandle);

resetPos = false; 

FigPos = get(FigHandle,'Position');
FigWidth = FigPos(3);
FigHeight = FigPos(4);

if FigWidth < Data.MinFigWidth
    FigWidth  = Data.MinFigWidth;
    FigPos(3) = Data.MinFigWidth;
    resetPos = true;
end

% make sure edit fields use all available space if 
% number of columns is not specified in dialog creation.
if ~multicolumn
    for lp = 1:length(Data.Edit)
        EditPos = get(Data.Edit(lp),'Position');
        EditPos(3) = FigWidth - Data.TextMargin;
        set(Data.Edit(lp),'Position',EditPos);
    end
end

if FigHeight ~= Data.FigHeight
    FigPos(4) = Data.FigHeight;
    resetPos = true;
end

if resetPos
    set(FigHandle,'Position',FigPos);  
end

end

% set pixel width given the number of columns
function EditWidth = setcolumnwidth(object, rows, cols)
% Save current Units and String.
old_units = get(object, 'Units');
old_string = get(object, 'String');
old_position = get(object, 'Position');

set(object, 'Units', 'pixels')
set(object, 'String', char(ones(1,cols)*'x'));

new_extent = get(object,'Extent');
if (rows > 1)
    % For multiple rows, allow space for the scrollbar
    new_extent = new_extent + 19; % Width of the scrollbar
end
new_position = old_position;
new_position(3) = new_extent(3) + 1;
set(object, 'Position', new_position);

% reset string and units
set(object, 'String', old_string, 'Units', old_units);

EditWidth = new_extent(3);

end

function figure_size = getnicedialoglocation(figure_size, figure_units)
% adjust the specified figure position to fig nicely over GCBF
% or into the upper 3rd of the screen

%  Copyright 1999-2010 The MathWorks, Inc.

parentHandle = gcbf;
convertData.destinationUnits = figure_units;
if ~isempty(parentHandle)
    % If there is a parent figure
    convertData.hFig = parentHandle;
    convertData.size = get(parentHandle,'Position');
    convertData.sourceUnits = get(parentHandle,'Units');  
    c = []; 
else
    % If there is no parent figure, use the root's data
    % and create a invisible figure as parent
    convertData.hFig = figure('visible','off');
    convertData.size = get(0,'ScreenSize');
    convertData.sourceUnits = get(0,'Units');
    c = onCleanup(@() close(convertData.hFig));
end

% Get the size of the dialog parent in the dialog units
container_size = hgconvertunits(convertData.hFig, convertData.size ,...
    convertData.sourceUnits, convertData.destinationUnits, get(convertData.hFig,'Parent'));

delete(c);

figure_size(1) = container_size(1)  + 1/2*(container_size(3) - figure_size(3));
figure_size(2) = container_size(2)  + 2/3*(container_size(4) - figure_size(4));

end

function setdefaultbutton(figHandle, btnHandle)
% WARNING: This feature is not supported in MATLAB and the API and
% functionality may change in a future release.

%SETDEFAULTBUTTON Set default button for a figure.
%  SETDEFAULTBUTTON(BTNHANDLE) sets the button passed in to be the default button
%  (the button and callback used when the user hits "enter" or "return"
%  when in a dialog box.
%
%  This function is used by inputdlg.m, msgbox.m, questdlg.m and
%  uigetpref.m.
%
%  Example:
%
%  f = figure;
%  b1 = uicontrol('style', 'pushbutton', 'string', 'first', ...
%       'position', [100 100 50 20]);
%  b2 = uicontrol('style', 'pushbutton', 'string', 'second', ...
%       'position', [200 100 50 20]);
%  b3 = uicontrol('style', 'pushbutton', 'string', 'third', ...
%       'position', [300 100 50 20]);
%  setdefaultbutton(b2);
%

%  Copyright 2005-2007 The MathWorks, Inc.

%--------------------------------------- NOTE ------------------------------------------
% This file was copied into matlab/toolbox/local/private.
% These two files should be kept in sync - when editing please make sure
% that *both* files are modified.

% Nargin Check
narginchk(1,2)

if (usejava('awt') == 1)
    % We are running with Java Figures
    useJavaDefaultButton(figHandle, btnHandle)
else
    % We are running with Native Figures
    useHGDefaultButton(figHandle, btnHandle);
end

    function useJavaDefaultButton(figH, btnH)
        % Get a UDD handle for the figure.
        fh = handle(figH);
        % Call the setDefaultButton method on the figure handle
        fh.setDefaultButton(btnH);
    end

    function useHGDefaultButton(figHandle, btnHandle)
        % First get the position of the button.
        btnPos = getpixelposition(btnHandle);

        % Next calculate offsets.
        leftOffset   = btnPos(1) - 1;
        bottomOffset = btnPos(2) - 2;
        widthOffset  = btnPos(3) + 3;
        heightOffset = btnPos(4) + 3;

        % Create the default button look with a uipanel.
        % Use black border color even on Mac or Windows-XP (XP scheme) since
        % this is in natve figures which uses the Win2K style buttons on Windows
        % and Motif buttons on the Mac.
        h1 = uipanel(get(btnHandle, 'Parent'), 'HighlightColor', 'black', ...
            'BorderType', 'etchedout', 'units', 'pixels', ...
            'Position', [leftOffset bottomOffset widthOffset heightOffset]);

        % Make sure it is stacked on the bottom.
        uistack(h1, 'bottom');
    end
end
